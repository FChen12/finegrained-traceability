{"ManagerGrade.exists(Grade)": {"calls": ["Grade.getId_grade()", "Utility.queryOperation(Connection,String)", "Utility.eNull(Integer)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": [], "class_name": "ManagerGrade", "method_name": "exists", "params": ["Grade"]}, "Grade.getId_grade()": {"calls": [], "called_by": ["ManagerGrade.exists(Grade)", "ManagerGrade.remove(Grade)", "ManagerGrade.update(Grade)", "ManagerGrade.getIdGrade(Teaching,int,int,ItemListUsers)"], "class_name": "Grade", "method_name": "getId_grade", "params": []}, "DBConnection.getConnection()": {"calls": ["SourceDataConnectionPool.getConnection()"], "called_by": ["ManagerGrade.removeGradePerUserIdYearRotation(int,int,int)", "ManagerStreetAddress.insert(StreetAddress)", "ManagerGrade.remove(Grade)", "ManagerGrade.getGradePerUserIdYearRotation(int,int,int)", "ManagerTeaching.getTeachings()", "ManagerTeaching.hasTeacher(Teaching)", "ManagerTeaching.getTeachingsPerClassId(int)", "ManagerRegister.removeDelay(Delay)", "ManagerRegister.getDelayPerId(int)", "ManagerTeaching.insert(Teaching)", "ManagerRegister.updateAbsence(Absence)", "ManagerGrade.getGrade()", "ManagerTeaching.getTeachingPerId(int)", "ManagerRegister.insertAbsence(Absence)", "ManagerRegister.getAbsencePerIdExcuse(int)", "ManagerRegister.getExcusePerIdExcuse(int)", "ManagerTeaching.getTeachingNamePerId(int)", "ManagerStreetAddress.delete(StreetAddress)", "ManagerStreetAddress.getStreetAddressElenco()", "ManagerRegister.getAbsencePerIdUserAndData(int,Date)", "ManagerStreetAddress.removeTeachingAsStreetAddress(StreetAddress,Teaching)", "ManagerRegister.updateExcuse(Excuse)", "ManagerRegister.exists(Absence)", "ManagerRegister.getAbsencePerIdAbsence(int)", "ManagerTeaching.getTeachingsPerClassName(String)", "ManagerRegister.exists(Excuse)", "ManagerRegister.removeNote(Note)", "ManagerStreetAddress.assignTeachingAsStreetAddress(StreetAddress,Teaching)", "ManagerStreetAddress.getStreetAddressPerId(int)", "ManagerRegister.exists(Delay)", "ManagerClass.getClassPerTeacher(User)", "ManagerGrade.getTeachingIdPerGradeId(int)", "ManagerTeaching.getTeachingsPerIdUserIdClass(int,int)", "ManagerGrade.exists(Grade)", "ManagerStreetAddress.getStreetAddressId(StreetAddress)", "ManagerRegister.removeExcuse(int)", "ManagerTeaching.getTeachingId(Teaching)", "ManagerTeaching.getTeachingsPerUserClassID(int,int)", "ManagerGrade.getGradePerId(int)", "ManagerGrade.getGradePerUserId(int)", "ManagerClass.update(Class)", "ManagerGrade.getIdGrade(Teaching,int,int,ItemListUsers)", "ManagerTeaching.getTeachingsPerUserId(int)", "ManagerClass.getClassPerAcademicYear(int)", "ManagerRegister.getNotePerIdUserAndAcademicYear(int,int)", "ManagerRegister.removeAbsence(Absence)", "ManagerClass.exists(Class)", "ManagerRegister.updateNote(Note)", "ManagerTeaching.update(Teaching)", "ManagerTeaching.remove(Teaching)", "ManagerGrade.update(Grade)", "ManagerGrade.insert(Grade)", "ManagerRegister.insertDelay(Delay)", "ManagerRegister.getAbsencePerIdUserAndAcademicYear(int,int)", "ManagerClass.getAcademicYearList()", "ManagerRegister.getDelayPerIdUserAndData(int,Date)", "ManagerTeaching.exists(Teaching)", "ManagerRegister.getNotePerId(int)", "ManagerClass.getClassPerStudent(User)", "Utility.getMaximumValue(String,String)", "ManagerStreetAddress.exists(StreetAddress)", "ManagerRegister.insertExcuse(Excuse,Absence)", "ManagerRegister.updateDelay(Delay)", "ManagerClass.getClassPerTeacherAcademicYear(User,int)", "ManagerRegister.getExcusePerAbsence(Absence)", "ManagerClass.getClassPerID(int)", "ManagerRegister.insertNote(Note)", "ManagerStreetAddress.hasTeaching(Teaching,StreetAddress)", "ManagerClass.insert(Class)", "ManagerStreetAddress.getNameStreetAddressPerId(int)", "ManagerClass.remove(Class)", "ManagerStreetAddress.getTeachingsStreetAddress(int)"], "class_name": "DBConnection", "method_name": "getConnection", "params": []}, "Utility.eNull(Integer)": {"calls": [], "called_by": ["ManagerGrade.removeGradePerUserIdYearRotation(int,int,int)", "ManagerGrade.remove(Grade)", "ManagerGrade.getGradePerUserIdYearRotation(int,int,int)", "ManagerTeaching.hasTeacher(Teaching)", "ManagerTeaching.getTeachingsPerClassId(int)", "ManagerRegister.removeDelay(Delay)", "ManagerRegister.getDelayPerId(int)", "ManagerRegister.updateAbsence(Absence)", "ManagerTeaching.getTeachingPerId(int)", "ManagerRegister.insertAbsence(Absence)", "ManagerRegister.getAbsencePerIdExcuse(int)", "ManagerRegister.getExcusePerIdExcuse(int)", "ManagerTeaching.getTeachingNamePerId(int)", "ManagerStreetAddress.delete(StreetAddress)", "ManagerRegister.getAbsencePerIdUserAndData(int,Date)", "ManagerStreetAddress.removeTeachingAsStreetAddress(StreetAddress,Teaching)", "ManagerRegister.updateExcuse(Excuse)", "ManagerRegister.exists(Absence)", "ManagerRegister.getAbsencePerIdAbsence(int)", "ManagerRegister.removeNote(Note)", "ManagerRegister.exists(Excuse)", "ManagerStreetAddress.assignTeachingAsStreetAddress(StreetAddress,Teaching)", "ManagerStreetAddress.getStreetAddressPerId(int)", "ManagerRegister.exists(Delay)", "ManagerClass.getClassPerTeacher(User)", "ManagerGrade.getTeachingIdPerGradeId(int)", "ManagerTeaching.getTeachingsPerIdUserIdClass(int,int)", "ManagerGrade.exists(Grade)", "ManagerRegister.removeExcuse(int)", "ManagerGrade.getGradePerId(int)", "ManagerTeaching.getTeachingsPerUserClassID(int,int)", "ManagerGrade.getGradePerUserId(int)", "ManagerClass.update(Class)", "ManagerGrade.getIdGrade(Teaching,int,int,ItemListUsers)", "ManagerTeaching.getTeachingsPerUserId(int)", "ManagerClass.getClassPerAcademicYear(int)", "ManagerRegister.getNotePerIdUserAndAcademicYear(int,int)", "ManagerRegister.removeAbsence(Absence)", "ManagerClass.exists(Class)", "ManagerRegister.updateNote(Note)", "ManagerTeaching.update(Teaching)", "ManagerTeaching.remove(Teaching)", "ManagerGrade.update(Grade)", "ManagerGrade.insert(Grade)", "ManagerRegister.insertDelay(Delay)", "ManagerRegister.getAbsencePerIdUserAndAcademicYear(int,int)", "ManagerRegister.getDelayPerIdUserAndData(int,Date)", "ManagerRegister.getNotePerId(int)", "ManagerClass.getClassPerStudent(User)", "ManagerRegister.insertExcuse(Excuse,Absence)", "ManagerRegister.updateDelay(Delay)", "ManagerClass.getClassPerTeacherAcademicYear(User,int)", "ManagerRegister.getExcusePerAbsence(Absence)", "ManagerClass.getClassPerID(int)", "ManagerRegister.insertNote(Note)", "ManagerStreetAddress.hasTeaching(Teaching,StreetAddress)", "ManagerClass.insert(Class)", "ManagerStreetAddress.getNameStreetAddressPerId(int)", "ManagerClass.remove(Class)", "ManagerStreetAddress.getTeachingsStreetAddress(int)"], "class_name": "Utility", "method_name": "eNull", "params": ["Integer"]}, "Utility.queryOperation(Connection,String)": {"calls": [], "called_by": ["ManagerGrade.getGradePerUserIdYearRotation(int,int,int)", "ManagerTeaching.getTeachings()", "ManagerTeaching.hasTeacher(Teaching)", "ManagerTeaching.getTeachingsPerClassId(int)", "ManagerRegister.getDelayPerId(int)", "ManagerGrade.getGrade()", "ManagerTeaching.getTeachingPerId(int)", "ManagerRegister.getAbsencePerIdExcuse(int)", "ManagerRegister.getExcusePerIdExcuse(int)", "ManagerTeaching.getTeachingNamePerId(int)", "ManagerStreetAddress.getStreetAddressElenco()", "ManagerRegister.getAbsencePerIdUserAndData(int,Date)", "ManagerRegister.exists(Absence)", "ManagerRegister.getAbsencePerIdAbsence(int)", "ManagerTeaching.getTeachingsPerClassName(String)", "ManagerRegister.exists(Excuse)", "ManagerStreetAddress.getStreetAddressPerId(int)", "ManagerRegister.exists(Delay)", "ManagerClass.getClassPerTeacher(User)", "ManagerGrade.getTeachingIdPerGradeId(int)", "ManagerStreetAddress.getStreetAddressId(StreetAddress)", "ManagerTeaching.getTeachingsPerIdUserIdClass(int,int)", "ManagerGrade.exists(Grade)", "ManagerGrade.getGradePerId(int)", "ManagerTeaching.getTeachingsPerUserClassID(int,int)", "ManagerTeaching.getTeachingId(Teaching)", "ManagerGrade.getGradePerUserId(int)", "ManagerGrade.getIdGrade(Teaching,int,int,ItemListUsers)", "ManagerTeaching.getTeachingsPerUserId(int)", "ManagerClass.getClassPerAcademicYear(int)", "ManagerRegister.getNotePerIdUserAndAcademicYear(int,int)", "ManagerClass.exists(Class)", "ManagerRegister.getAbsencePerIdUserAndAcademicYear(int,int)", "ManagerClass.getAcademicYearList()", "ManagerRegister.getDelayPerIdUserAndData(int,Date)", "ManagerTeaching.exists(Teaching)", "ManagerRegister.getNotePerId(int)", "ManagerClass.getClassPerStudent(User)", "Utility.getMaximumValue(String,String)", "ManagerStreetAddress.exists(StreetAddress)", "ManagerClass.getClassPerTeacherAcademicYear(User,int)", "ManagerRegister.getExcusePerAbsence(Absence)", "ManagerClass.getClassPerID(int)", "ManagerStreetAddress.hasTeaching(Teaching,StreetAddress)", "ManagerStreetAddress.getNameStreetAddressPerId(int)", "ManagerStreetAddress.getTeachingsStreetAddress(int)"], "class_name": "Utility", "method_name": "queryOperation", "params": ["Connection", "String"]}, "DBConnection.releaseConnections(Connection)": {"calls": ["SourceDataConnectionPool.release(Connection)"], "called_by": ["ManagerGrade.removeGradePerUserIdYearRotation(int,int,int)", "ManagerStreetAddress.insert(StreetAddress)", "ManagerGrade.remove(Grade)", "ManagerGrade.getGradePerUserIdYearRotation(int,int,int)", "ManagerTeaching.getTeachings()", "ManagerTeaching.hasTeacher(Teaching)", "ManagerTeaching.getTeachingsPerClassId(int)", "ManagerRegister.removeDelay(Delay)", "ManagerRegister.getDelayPerId(int)", "ManagerTeaching.insert(Teaching)", "ManagerRegister.updateAbsence(Absence)", "ManagerGrade.getGrade()", "ManagerTeaching.getTeachingPerId(int)", "ManagerRegister.insertAbsence(Absence)", "ManagerRegister.getAbsencePerIdExcuse(int)", "ManagerRegister.getExcusePerIdExcuse(int)", "ManagerTeaching.getTeachingNamePerId(int)", "ManagerStreetAddress.delete(StreetAddress)", "ManagerStreetAddress.getStreetAddressElenco()", "ManagerRegister.getAbsencePerIdUserAndData(int,Date)", "ManagerStreetAddress.removeTeachingAsStreetAddress(StreetAddress,Teaching)", "ManagerRegister.updateExcuse(Excuse)", "ManagerRegister.exists(Absence)", "ManagerRegister.getAbsencePerIdAbsence(int)", "ManagerTeaching.getTeachingsPerClassName(String)", "ManagerRegister.exists(Excuse)", "ManagerRegister.removeNote(Note)", "ManagerStreetAddress.assignTeachingAsStreetAddress(StreetAddress,Teaching)", "ManagerStreetAddress.getStreetAddressPerId(int)", "ManagerRegister.exists(Delay)", "ManagerClass.getClassPerTeacher(User)", "ManagerGrade.getTeachingIdPerGradeId(int)", "ManagerTeaching.getTeachingsPerIdUserIdClass(int,int)", "ManagerGrade.exists(Grade)", "ManagerStreetAddress.getStreetAddressId(StreetAddress)", "ManagerRegister.removeExcuse(int)", "ManagerTeaching.getTeachingId(Teaching)", "ManagerTeaching.getTeachingsPerUserClassID(int,int)", "ManagerGrade.getGradePerId(int)", "ManagerGrade.getGradePerUserId(int)", "ManagerClass.update(Class)", "ManagerGrade.getIdGrade(Teaching,int,int,ItemListUsers)", "ManagerTeaching.getTeachingsPerUserId(int)", "ManagerClass.getClassPerAcademicYear(int)", "ManagerRegister.getNotePerIdUserAndAcademicYear(int,int)", "ManagerRegister.removeAbsence(Absence)", "ManagerClass.exists(Class)", "ManagerRegister.updateNote(Note)", "ManagerTeaching.update(Teaching)", "ManagerTeaching.remove(Teaching)", "ManagerGrade.update(Grade)", "ManagerGrade.insert(Grade)", "ManagerRegister.insertDelay(Delay)", "ManagerRegister.getAbsencePerIdUserAndAcademicYear(int,int)", "ManagerClass.getAcademicYearList()", "ManagerRegister.getDelayPerIdUserAndData(int,Date)", "ManagerTeaching.exists(Teaching)", "ManagerRegister.getNotePerId(int)", "ManagerClass.getClassPerStudent(User)", "Utility.getMaximumValue(String,String)", "ManagerStreetAddress.exists(StreetAddress)", "ManagerRegister.insertExcuse(Excuse,Absence)", "ManagerRegister.updateDelay(Delay)", "ManagerClass.getClassPerTeacherAcademicYear(User,int)", "ManagerRegister.getExcusePerAbsence(Absence)", "ManagerClass.getClassPerID(int)", "ManagerRegister.insertNote(Note)", "ManagerStreetAddress.hasTeaching(Teaching,StreetAddress)", "ManagerClass.insert(Class)", "ManagerStreetAddress.getNameStreetAddressPerId(int)", "ManagerClass.remove(Class)", "ManagerStreetAddress.getTeachingsStreetAddress(int)"], "class_name": "DBConnection", "method_name": "releaseConnections", "params": ["Connection"]}, "ManagerGrade.insert(Grade)": {"calls": ["Utility.performOperation(Connection,String)", "Utility.getMaximumValue(String,String)", "Grade.setId_grade(int)", "Grade.getId_user()", "Grade.getAcademicYear()", "DBConnection.releaseConnections(Connection)", "Grade.getOral()", "Grade.getTeaching()", "Grade.getWriting()", "Utility.eNull(Integer)", "Grade.getRotation()", "Grade.getLaboratory()", "DBConnection.getConnection()"], "called_by": ["ServletInsertSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "UserTest.main(String[])", "ServletSchoolReportUpdate.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerGrade", "method_name": "insert", "params": ["Grade"]}, "Grade.getId_user()": {"calls": [], "called_by": ["ManagerGrade.update(Grade)", "ManagerGrade.insert(Grade)"], "class_name": "Grade", "method_name": "getId_user", "params": []}, "Grade.getTeaching()": {"calls": [], "called_by": ["ManagerGrade.update(Grade)", "ManagerGrade.insert(Grade)"], "class_name": "Grade", "method_name": "getTeaching", "params": []}, "Grade.getWriting()": {"calls": [], "called_by": ["ManagerGrade.update(Grade)", "ManagerGrade.insert(Grade)"], "class_name": "Grade", "method_name": "getWriting", "params": []}, "Grade.getOral()": {"calls": [], "called_by": ["ManagerGrade.update(Grade)", "ManagerGrade.insert(Grade)"], "class_name": "Grade", "method_name": "getOral", "params": []}, "Grade.getLaboratory()": {"calls": [], "called_by": ["ManagerGrade.update(Grade)", "ManagerGrade.insert(Grade)"], "class_name": "Grade", "method_name": "getLaboratory", "params": []}, "Grade.getAcademicYear()": {"calls": [], "called_by": ["ManagerGrade.update(Grade)", "ManagerGrade.insert(Grade)"], "class_name": "Grade", "method_name": "getAcademicYear", "params": []}, "Grade.getRotation()": {"calls": [], "called_by": ["ManagerGrade.update(Grade)", "ManagerGrade.insert(Grade)"], "class_name": "Grade", "method_name": "getRotation", "params": []}, "Utility.performOperation(Connection,String)": {"calls": [], "called_by": ["ManagerGrade.removeGradePerUserIdYearRotation(int,int,int)", "ManagerStreetAddress.insert(StreetAddress)", "ManagerClass.update(Class)", "ManagerGrade.remove(Grade)", "ManagerRegister.removeDelay(Delay)", "ManagerRegister.removeAbsence(Absence)", "ManagerTeaching.insert(Teaching)", "ManagerRegister.updateAbsence(Absence)", "ManagerRegister.updateNote(Note)", "ManagerTeaching.update(Teaching)", "ManagerTeaching.remove(Teaching)", "ManagerGrade.update(Grade)", "ManagerRegister.insertAbsence(Absence)", "ManagerGrade.insert(Grade)", "ManagerRegister.insertDelay(Delay)", "ManagerStreetAddress.delete(StreetAddress)", "ManagerStreetAddress.removeTeachingAsStreetAddress(StreetAddress,Teaching)", "ManagerRegister.updateExcuse(Excuse)", "ManagerRegister.insertExcuse(Excuse,Absence)", "ManagerRegister.updateDelay(Delay)", "ManagerRegister.removeNote(Note)", "ManagerStreetAddress.assignTeachingAsStreetAddress(StreetAddress,Teaching)", "ManagerRegister.insertNote(Note)", "ManagerClass.insert(Class)", "ManagerRegister.removeExcuse(int)", "ManagerClass.remove(Class)"], "class_name": "Utility", "method_name": "performOperation", "params": ["Connection", "String"]}, "Utility.getMaximumValue(String,String)": {"calls": ["Utility.queryOperation(Connection,String)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": ["ManagerStreetAddress.insert(StreetAddress)", "ManagerRegister.insertNote(Note)", "ManagerClass.insert(Class)", "ManagerRegister.insertAbsence(Absence)", "ManagerGrade.insert(Grade)", "ManagerRegister.insertExcuse(Excuse,Absence)", "ManagerRegister.insertDelay(Delay)", "ManagerTeaching.insert(Teaching)"], "class_name": "Utility", "method_name": "getMaximumValue", "params": ["String", "String"]}, "Grade.setId_grade(int)": {"calls": [], "called_by": ["ManagerGrade.loadRecordFromRs(ResultSet)", "ManagerGrade.insert(Grade)"], "class_name": "Grade", "method_name": "setId_grade", "params": ["int"]}, "ManagerGrade.update(Grade)": {"calls": ["Grade.getId_grade()", "Utility.performOperation(Connection,String)", "Grade.getId_user()", "Grade.getAcademicYear()", "DBConnection.releaseConnections(Connection)", "Grade.getOral()", "Grade.getTeaching()", "Grade.getWriting()", "Utility.eNull(Integer)", "Grade.getLaboratory()", "Grade.getRotation()", "DBConnection.getConnection()"], "called_by": ["ServletSchoolReportUpdate.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerGrade", "method_name": "update", "params": ["Grade"]}, "ManagerGrade.getIdGrade(Teaching,int,int,ItemListUsers)": {"calls": ["Grade.getId_grade()", "ItemListUsers.getId()", "ManagerGrade.loadRecordFromRs(ResultSet)", "DBConnection.releaseConnections(Connection)", "Utility.queryOperation(Connection,String)", "Utility.eNull(Integer)", "Teaching.getId()", "DBConnection.getConnection()"], "called_by": ["ServletSchoolReportUpdate.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerGrade", "method_name": "getIdGrade", "params": ["Teaching", "int", "int", "ItemListUsers"]}, "Teaching.getId()": {"calls": [], "called_by": ["ManagerStreetAddress.removeTeachingAsStreetAddress(StreetAddress,Teaching)", "ServletSchoolReportUpdate.doGet(HttpServletRequest,HttpServletResponse)", "ManagerTeaching.hasTeacher(Teaching)", "ManagerGrade.getIdGrade(Teaching,int,int,ItemListUsers)", "ServletInsertSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ManagerTeaching.update(Teaching)", "ManagerTeaching.remove(Teaching)", "ManagerStreetAddress.hasTeaching(Teaching,StreetAddress)", "ManagerStreetAddress.assignTeachingAsStreetAddress(StreetAddress,Teaching)", "ServletUpgradTeaching.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "Teaching", "method_name": "getId", "params": []}, "ItemListUsers.getId()": {"calls": [], "called_by": ["ServletSchoolReportUpdate.doGet(HttpServletRequest,HttpServletResponse)", "ManagerGrade.getIdGrade(Teaching,int,int,ItemListUsers)", "ServletLoadSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletCancelSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignStudentParent.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTheStudentClassroom.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)", "ManagerRegister.getRegistrationsPerClassIDEData(int,Date)"], "class_name": "ItemListUsers", "method_name": "getId", "params": []}, "ManagerGrade.loadRecordFromRs(ResultSet)": {"calls": ["Grade.setWriting(int)", "Grade.setAcademicYear(int)", "Grade.setId_grade(int)", "Grade.setOral(int)", "Grade.setRotation(int)", "Grade.setLaboratory(int)", "Grade.setTeaching(int)", "Grade.setId_user(int)"], "called_by": ["ManagerGrade.loadRecordsFromRs(ResultSet)", "ManagerGrade.getIdGrade(Teaching,int,int,ItemListUsers)", "ManagerGrade.getGradePerId(int)"], "class_name": "ManagerGrade", "method_name": "loadRecordFromRs", "params": ["ResultSet"]}, "ManagerGrade.remove(Grade)": {"calls": ["Grade.getId_grade()", "Utility.performOperation(Connection,String)", "Utility.eNull(Integer)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": ["ServletSchoolReportUpdate.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerGrade", "method_name": "remove", "params": ["Grade"]}, "ManagerGrade.getGradePerId(int)": {"calls": ["Utility.queryOperation(Connection,String)", "Utility.eNull(Integer)", "ManagerGrade.loadRecordFromRs(ResultSet)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": ["ServletSchoolReportUpdate.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerGrade", "method_name": "getGradePerId", "params": ["int"]}, "ManagerGrade.getTeachingIdPerGradeId(int)": {"calls": ["Utility.queryOperation(Connection,String)", "Utility.eNull(Integer)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": [], "class_name": "ManagerGrade", "method_name": "getTeachingIdPerGradeId", "params": ["int"]}, "ManagerGrade.getGrade()": {"calls": ["Utility.queryOperation(Connection,String)", "DBConnection.releaseConnections(Connection)", "DBConnection.getConnection()", "ManagerGrade.loadRecordsFromRs(ResultSet)"], "called_by": [], "class_name": "ManagerGrade", "method_name": "getGrade", "params": []}, "ManagerGrade.loadRecordsFromRs(ResultSet)": {"calls": ["ManagerGrade.loadRecordFromRs(ResultSet)"], "called_by": ["ManagerGrade.getGrade()", "ManagerGrade.getGradePerUserId(int)", "ManagerGrade.getGradePerUserIdYearRotation(int,int,int)"], "class_name": "ManagerGrade", "method_name": "loadRecordsFromRs", "params": ["ResultSet"]}, "ManagerGrade.getGradePerUserId(int)": {"calls": ["Utility.queryOperation(Connection,String)", "DBConnection.releaseConnections(Connection)", "Utility.eNull(Integer)", "DBConnection.getConnection()", "ManagerGrade.loadRecordsFromRs(ResultSet)"], "called_by": [], "class_name": "ManagerGrade", "method_name": "getGradePerUserId", "params": ["int"]}, "ManagerGrade.getGradePerUserIdYearRotation(int,int,int)": {"calls": ["Utility.queryOperation(Connection,String)", "DBConnection.releaseConnections(Connection)", "Utility.eNull(Integer)", "DBConnection.getConnection()", "ManagerGrade.loadRecordsFromRs(ResultSet)"], "called_by": ["ServletLoadSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowSchoolReport.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerGrade", "method_name": "getGradePerUserIdYearRotation", "params": ["int", "int", "int"]}, "ManagerGrade.removeGradePerUserIdYearRotation(int,int,int)": {"calls": ["Utility.performOperation(Connection,String)", "Utility.eNull(Integer)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": ["ServletCancelSchoolReport.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerGrade", "method_name": "removeGradePerUserIdYearRotation", "params": ["int", "int", "int"]}, "Grade.setId_user(int)": {"calls": [], "called_by": ["ServletInsertSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "UserTest.main(String[])", "ManagerGrade.loadRecordFromRs(ResultSet)", "ServletSchoolReportUpdate.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "Grade", "method_name": "setId_user", "params": ["int"]}, "Grade.setTeaching(int)": {"calls": [], "called_by": ["ServletInsertSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "UserTest.main(String[])", "ManagerGrade.loadRecordFromRs(ResultSet)", "ServletSchoolReportUpdate.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "Grade", "method_name": "setTeaching", "params": ["int"]}, "Grade.setWriting(int)": {"calls": [], "called_by": ["ServletInsertSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "UserTest.main(String[])", "ManagerGrade.loadRecordFromRs(ResultSet)", "ServletSchoolReportUpdate.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "Grade", "method_name": "setWriting", "params": ["int"]}, "Grade.setOral(int)": {"calls": [], "called_by": ["ServletInsertSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "UserTest.main(String[])", "ManagerGrade.loadRecordFromRs(ResultSet)", "ServletSchoolReportUpdate.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "Grade", "method_name": "setOral", "params": ["int"]}, "Grade.setLaboratory(int)": {"calls": [], "called_by": ["ServletInsertSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "UserTest.main(String[])", "ManagerGrade.loadRecordFromRs(ResultSet)", "ServletSchoolReportUpdate.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "Grade", "method_name": "setLaboratory", "params": ["int"]}, "Grade.setAcademicYear(int)": {"calls": [], "called_by": ["ServletInsertSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "UserTest.main(String[])", "ManagerGrade.loadRecordFromRs(ResultSet)", "ServletSchoolReportUpdate.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "Grade", "method_name": "setAcademicYear", "params": ["int"]}, "Grade.setRotation(int)": {"calls": [], "called_by": ["ServletInsertSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "UserTest.main(String[])", "ManagerGrade.loadRecordFromRs(ResultSet)", "ServletSchoolReportUpdate.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "Grade", "method_name": "setRotation", "params": ["int"]}, "ManagerClass.exists(Class)": {"calls": ["Class.getAcademicYear()", "Class.getName()", "DBConnection.releaseConnections(Connection)", "Utility.queryOperation(Connection,String)", "Class.getIdStreetAddress()", "Utility.eNull(Integer)", "Utility.eNull(String)", "DBConnection.getConnection()"], "called_by": ["ServletInsertClass.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerClass", "method_name": "exists", "params": ["Class"]}, "Class.getName()": {"calls": [], "called_by": ["ManagerClass.update(Class)", "ManagerClass.insert(Class)", "ManagerClass.exists(Class)"], "class_name": "Class", "method_name": "getName", "params": []}, "Class.getAcademicYear()": {"calls": [], "called_by": ["ServletInsertClass.doGet(HttpServletRequest,HttpServletResponse)", "ManagerClass.update(Class)", "ServletShowListJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListNote.doGet(HttpServletRequest,HttpServletResponse)", "ManagerClass.getClassPerUserAcademicYear(User,int)", "ManagerClass.exists(Class)", "ServletShowDetailsNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)", "ManagerClass.insert(Class)", "ServletInsertNewNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveClass.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "Class", "method_name": "getAcademicYear", "params": []}, "Class.getIdStreetAddress()": {"calls": [], "called_by": ["ServletInsertSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ManagerClass.update(Class)", "ServletSchoolReportUpdate.doGet(HttpServletRequest,HttpServletResponse)", "ManagerClass.insert(Class)", "ServletLoadListOfTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ManagerClass.exists(Class)"], "class_name": "Class", "method_name": "getIdStreetAddress", "params": []}, "Utility.eNull(String)": {"calls": ["Utility.sostituireTuttoStrings(String,String,String)"], "called_by": ["ManagerStreetAddress.insert(StreetAddress)", "ManagerClass.update(Class)", "ManagerStreetAddress.exists(StreetAddress)", "ManagerRegister.updateDelay(Delay)", "ManagerRegister.updateNote(Note)", "ManagerTeaching.insert(Teaching)", "ManagerTeaching.getTeachingsPerClassName(String)", "ManagerClass.exists(Class)", "ManagerTeaching.update(Teaching)", "ManagerRegister.insertNote(Note)", "ManagerClass.insert(Class)", "ManagerRegister.insertDelay(Delay)", "ManagerStreetAddress.getStreetAddressId(StreetAddress)", "ManagerTeaching.exists(Teaching)", "ManagerTeaching.getTeachingId(Teaching)"], "class_name": "Utility", "method_name": "eNull", "params": ["String"]}, "ManagerClass.insert(Class)": {"calls": ["Utility.performOperation(Connection,String)", "Utility.getMaximumValue(String,String)", "Class.getAcademicYear()", "Class.getName()", "DBConnection.releaseConnections(Connection)", "Class.getIdStreetAddress()", "Class.setIdClass(int)", "Utility.eNull(Integer)", "Utility.eNull(String)", "DBConnection.getConnection()"], "called_by": ["ServletInsertClass.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerClass", "method_name": "insert", "params": ["Class"]}, "Class.setIdClass(int)": {"calls": [], "called_by": ["ManagerClass.loadRecordFromRs(ResultSet)", "ManagerClass.insert(Class)"], "class_name": "Class", "method_name": "setIdClass", "params": ["int"]}, "ManagerClass.update(Class)": {"calls": ["Utility.performOperation(Connection,String)", "Class.getAcademicYear()", "Class.getName()", "DBConnection.releaseConnections(Connection)", "Class.getIdStreetAddress()", "Utility.eNull(Integer)", "Utility.eNull(String)", "Class.getIdClass()", "DBConnection.getConnection()"], "called_by": [], "class_name": "ManagerClass", "method_name": "update", "params": ["Class"]}, "Class.getIdClass()": {"calls": [], "called_by": ["ServletRemoveTheStudentClassroom.doGet(HttpServletRequest,HttpServletResponse)", "ManagerClass.update(Class)", "ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)", "ManagerClass.remove(Class)", "ServletAssignStudentsInClass.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "Class", "method_name": "getIdClass", "params": []}, "ManagerClass.remove(Class)": {"calls": ["Utility.performOperation(Connection,String)", "DBConnection.releaseConnections(Connection)", "Utility.eNull(Integer)", "Class.getIdClass()", "DBConnection.getConnection()"], "called_by": ["ServletRemoveClass.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerClass", "method_name": "remove", "params": ["Class"]}, "ManagerClass.getClassPerStudent(User)": {"calls": ["ManagerUser.getInstance()", "ManagerUser.eStudent(User)", "ManagerUser.getUserId(User)", "ManagerClass.loadRecordsFromRs(ResultSet)", "DBConnection.releaseConnections(Connection)", "ManagerUser.exists(User)", "Utility.queryOperation(Connection,String)", "Utility.eNull(Integer)", "DBConnection.getConnection()"], "called_by": ["ManagerClass.getClassPerUserAcademicYear(User,int)"], "class_name": "ManagerClass", "method_name": "getClassPerStudent", "params": ["User"]}, "ManagerUser.getInstance()": {"calls": [], "called_by": ["ServletAddTeachingToTeacher.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletCancelSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListTeachings.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsNote.doGet(HttpServletRequest,HttpServletResponse)", "ManagerRegister.getRegistrationsPerClassIDEData(int,Date)", "ServletLoadYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletSchoolReportUpdate.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignStudentParent.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTheStudentClassroom.doGet(HttpServletRequest,HttpServletResponse)", "ManagerClass.getClassPerTeacher(User)", "ServletShowDetailsOfClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadClassPerAcademicYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTeachingPerTeacher.doGet(HttpServletRequest,HttpServletResponse)", "ServletStreetAddressTeachings.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpgradTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletAddRemoveTeachingsToStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowStudentsPerClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletReportTeachings.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowClassPerAcademicYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletViewDetailsJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowModuleRoleUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignRole.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListAdresses.doGet(HttpServletRequest,HttpServletResponse)", "ManagerClass.getClassPerStudent(User)", "ServletViewRegistration.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadListOfTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowClassManagement.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowModuleTeachingUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletModifyPersonalData.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowTeacherModulePerClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletCalculationStatistics.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListUsers.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertNewNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateJustified.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignStudentsInClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletAccess.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "getInstance", "params": []}, "ManagerUser.exists(User)": {"calls": [], "called_by": ["ServletInsertUser.doGet(HttpServletRequest,HttpServletResponse)", "ManagerClass.getClassPerStudent(User)", "ServletUpdateUser.doGet(HttpServletRequest,HttpServletResponse)", "ManagerClass.getClassPerTeacher(User)", "ServletModifyPersonalData.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "exists", "params": ["User"]}, "ManagerUser.eStudent(User)": {"calls": [], "called_by": ["ServletShowModuleRoleUser.doGet(HttpServletRequest,HttpServletResponse)", "ManagerClass.getClassPerStudent(User)", "ServletAccess.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "eStudent", "params": ["User"]}, "ManagerUser.getUserId(User)": {"calls": [], "called_by": ["ServletUpdateUser.doGet(HttpServletRequest,HttpServletResponse)", "ManagerClass.getClassPerStudent(User)", "ServletModifyPersonalData.doGet(HttpServletRequest,HttpServletResponse)", "ManagerClass.getClassPerTeacher(User)"], "class_name": "ManagerUser", "method_name": "getUserId", "params": ["User"]}, "ManagerClass.loadRecordsFromRs(ResultSet)": {"calls": ["ManagerClass.loadRecordFromRs(ResultSet)"], "called_by": ["ManagerClass.getClassPerAcademicYear(int)", "ManagerClass.getClassPerStudent(User)", "ManagerClass.getClassPerTeacher(User)", "ManagerClass.getClassPerTeacherAcademicYear(User,int)"], "class_name": "ManagerClass", "method_name": "loadRecordsFromRs", "params": ["ResultSet"]}, "ManagerClass.getClassPerID(int)": {"calls": ["Utility.queryOperation(Connection,String)", "DBConnection.releaseConnections(Connection)", "Utility.eNull(Integer)", "ManagerClass.loadRecordFromRs(ResultSet)", "DBConnection.getConnection()"], "called_by": ["ServletAddTeachingToTeacher.doGet(HttpServletRequest,HttpServletResponse)", "ServletViewRegistration.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowStudentsPerClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsOfClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTeachingPerTeacher.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowTeacherModulePerClass.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerClass", "method_name": "getClassPerID", "params": ["int"]}, "ManagerClass.loadRecordFromRs(ResultSet)": {"calls": ["Class.setName(String)", "Class.setIdClass(int)", "Class.setIdStreetAddress(int)", "Class.setAcademicYear(int)"], "called_by": ["ManagerClass.getClassPerID(int)", "ManagerClass.loadRecordsFromRs(ResultSet)"], "class_name": "ManagerClass", "method_name": "loadRecordFromRs", "params": ["ResultSet"]}, "ManagerClass.getClassPerAcademicYear(int)": {"calls": ["Utility.queryOperation(Connection,String)", "Utility.eNull(Integer)", "ManagerClass.loadRecordsFromRs(ResultSet)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": ["ServletShowListClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowClassManagement.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadClassPerAcademicYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowClassPerAcademicYear.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerClass", "method_name": "getClassPerAcademicYear", "params": ["int"]}, "ManagerClass.getAcademicYearList()": {"calls": ["Utility.queryOperation(Connection,String)", "DBConnection.releaseConnections(Connection)", "DBConnection.getConnection()", "ManagerClass.loadIntegersFromRs(ResultSet)"], "called_by": ["ServletLoadYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletCalculationStatistics.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerClass", "method_name": "getAcademicYearList", "params": []}, "ManagerClass.loadIntegersFromRs(ResultSet)": {"calls": [], "called_by": ["ManagerClass.getAcademicYearList()"], "class_name": "ManagerClass", "method_name": "loadIntegersFromRs", "params": ["ResultSet"]}, "ManagerClass.getClassPerUserAcademicYear(User,int)": {"calls": ["ManagerClass.getClassPerStudent(User)", "ManagerClass.getInstance()", "Class.getAcademicYear()"], "called_by": ["ServletAssignStudentsInClass.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerClass", "method_name": "getClassPerUserAcademicYear", "params": ["User", "int"]}, "ManagerClass.getInstance()": {"calls": [], "called_by": ["ServletAddTeachingToTeacher.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowStudentsPerClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletReportTeachings.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowClassPerAcademicYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletViewRegistration.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowClassManagement.doGet(HttpServletRequest,HttpServletResponse)", "ManagerClass.getClassPerUserAcademicYear(User,int)", "ServletShowTeacherModulePerClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletCalculationStatistics.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTheStudentClassroom.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadClassPerAcademicYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsOfClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTeachingPerTeacher.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowModuleTeachingUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignStudentsInClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveClass.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerClass", "method_name": "getInstance", "params": []}, "ManagerClass.getClassPerTeacherAcademicYear(User,int)": {"calls": ["User.getId()", "Utility.queryOperation(Connection,String)", "Utility.eNull(Integer)", "ManagerClass.loadRecordsFromRs(ResultSet)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": ["ServletReportTeachings.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerClass", "method_name": "getClassPerTeacherAcademicYear", "params": ["User", "int"]}, "User.getId()": {"calls": [], "called_by": ["ServletAddTeachingToTeacher.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletModifyPersonalData.doGet(HttpServletRequest,HttpServletResponse)", "ManagerClass.getClassPerTeacherAcademicYear(User,int)", "ServletShowSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignStudentParent.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTheStudentClassroom.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertNewNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTeachingPerTeacher.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "User", "method_name": "getId", "params": []}, "ManagerClass.getClassPerTeacher(User)": {"calls": ["ManagerUser.getInstance()", "ManagerUser.getUserId(User)", "ManagerClass.loadRecordsFromRs(ResultSet)", "DBConnection.releaseConnections(Connection)", "ManagerUser.exists(User)", "Utility.queryOperation(Connection,String)", "Utility.eNull(Integer)", "ManagerUser.eTeacher(User)", "DBConnection.getConnection()"], "called_by": ["ServletShowModuleTeachingUser.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerClass", "method_name": "getClassPerTeacher", "params": ["User"]}, "ManagerUser.eTeacher(User)": {"calls": [], "called_by": ["ServletShowModuleRoleUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowModuleTeachingUser.doGet(HttpServletRequest,HttpServletResponse)", "ManagerClass.getClassPerTeacher(User)", "ServletAccess.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "eTeacher", "params": ["User"]}, "Class.setName(String)": {"calls": [], "called_by": ["ServletInsertClass.doGet(HttpServletRequest,HttpServletResponse)", "ManagerClass.loadRecordFromRs(ResultSet)"], "class_name": "Class", "method_name": "setName", "params": ["String"]}, "Class.setAcademicYear(int)": {"calls": [], "called_by": ["ServletInsertClass.doGet(HttpServletRequest,HttpServletResponse)", "ManagerClass.loadRecordFromRs(ResultSet)"], "class_name": "Class", "method_name": "setAcademicYear", "params": ["int"]}, "Class.setIdStreetAddress(int)": {"calls": [], "called_by": ["ServletInsertClass.doGet(HttpServletRequest,HttpServletResponse)", "ManagerClass.loadRecordFromRs(ResultSet)"], "class_name": "Class", "method_name": "setIdStreetAddress", "params": ["int"]}, "UserTest.main(String[])": {"calls": ["ItemListUsers.setId(int)", "Grade.setLaboratory(int)", "ManagerGrade.insert(Grade)", "Grade.setAcademicYear(int)", "Grade.setRotation(int)", "Grade.setOral(int)", "Grade.setWriting(int)", "Teaching.setId(int)", "ManagerGrade.getInstance()", "Grade.setTeaching(int)", "Grade.setId_user(int)"], "called_by": [], "class_name": "UserTest", "method_name": "main", "params": ["String[]"]}, "ItemListUsers.setId(int)": {"calls": [], "called_by": ["UserTest.main(String[])", "ServletShowSchoolReport.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ItemListUsers", "method_name": "setId", "params": ["int"]}, "Teaching.setId(int)": {"calls": [], "called_by": ["UserTest.main(String[])", "ManagerTeaching.loadRecordFromRs(ResultSet)", "ServletUpgradTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ManagerTeaching.insert(Teaching)"], "class_name": "Teaching", "method_name": "setId", "params": ["int"]}, "ManagerGrade.getInstance()": {"calls": [], "called_by": ["ServletInsertSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "UserTest.main(String[])", "ServletSchoolReportUpdate.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletCancelSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowSchoolReport.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerGrade", "method_name": "getInstance", "params": []}, "SourceDataConnectionPool.getConnection()": {"calls": ["SourceDataConnectionPool.getPooledConnection(int)", "SourceDataConnectionPool.createNewConnection()"], "called_by": ["ControlConnection.run()", "DBConnection.getConnection()"], "class_name": "SourceDataConnectionPool", "method_name": "getConnection", "params": []}, "DBConnection.loadPool()": {"calls": ["ControlConnection.start()", "SourceDataConnectionPool.setActiveTimeout(long)"], "called_by": ["DBConnection.<clinit>()"], "class_name": "DBConnection", "method_name": "loadPool", "params": []}, "SourceDataConnectionPool.setActiveTimeout(long)": {"calls": [], "called_by": ["DBConnection.loadPool()"], "class_name": "SourceDataConnectionPool", "method_name": "setActiveTimeout", "params": ["long"]}, "ControlConnection.start()": {"calls": [], "called_by": ["DBConnection.loadPool()"], "class_name": "ControlConnection", "method_name": "start", "params": []}, "SourceDataConnectionPool.release(Connection)": {"calls": ["SMOSConnections.getConnection()"], "called_by": ["SourceDataConnectionPool.clearActive()", "ConnectionWrapper.close()", "ControlConnection.run()", "DBConnection.releaseConnections(Connection)"], "class_name": "SourceDataConnectionPool", "method_name": "release", "params": ["Connection"]}, "DBConnection.<clinit>()": {"calls": ["Utility.getPoolTimeout()", "Utility.getDriverMySql()", "Environment.getPoolPropertiesPath()", "Utility.getDimensionMaximumPool()", "Utility.getCompletePathDatabase()", "Utility.getUserName()", "Utility.getPassword()", "Utility.getWaitTimeout()", "Utility.getActiveTimeout()", "DBConnection.loadPool()"], "called_by": [], "class_name": "DBConnection", "method_name": "<clinit>", "params": []}, "Environment.getPoolPropertiesPath()": {"calls": [], "called_by": ["DBConnection.<clinit>()"], "class_name": "Environment", "method_name": "getPoolPropertiesPath", "params": []}, "Utility.getDriverMySql()": {"calls": [], "called_by": ["DBConnection.<clinit>()"], "class_name": "Utility", "method_name": "getDriverMySql", "params": []}, "Utility.getCompletePathDatabase()": {"calls": [], "called_by": ["DBConnection.<clinit>()"], "class_name": "Utility", "method_name": "getCompletePathDatabase", "params": []}, "Utility.getUserName()": {"calls": [], "called_by": ["DBConnection.<clinit>()"], "class_name": "Utility", "method_name": "getUserName", "params": []}, "Utility.getPassword()": {"calls": [], "called_by": ["DBConnection.<clinit>()"], "class_name": "Utility", "method_name": "getPassword", "params": []}, "Utility.getDimensionMaximumPool()": {"calls": [], "called_by": ["DBConnection.<clinit>()"], "class_name": "Utility", "method_name": "getDimensionMaximumPool", "params": []}, "Utility.getWaitTimeout()": {"calls": [], "called_by": ["DBConnection.<clinit>()"], "class_name": "Utility", "method_name": "getWaitTimeout", "params": []}, "Utility.getActiveTimeout()": {"calls": [], "called_by": ["DBConnection.<clinit>()"], "class_name": "Utility", "method_name": "getActiveTimeout", "params": []}, "Utility.getPoolTimeout()": {"calls": [], "called_by": ["DBConnection.<clinit>()"], "class_name": "Utility", "method_name": "getPoolTimeout", "params": []}, "ControlConnection.run()": {"calls": ["SourceDataConnectionPool.clearActive()", "SourceDataConnectionPool.getConnection()", "SourceDataConnectionPool.release(Connection)", "SourceDataConnectionPool.activeSize()", "ControlConnection.setPriority(int)", "SourceDataConnectionPool.closeAllInPoolConnections()"], "called_by": [], "class_name": "ControlConnection", "method_name": "run", "params": []}, "SourceDataConnectionPool.activeSize()": {"calls": [], "called_by": ["ControlConnection.run()", "SourceDataConnectionPool.toString()"], "class_name": "SourceDataConnectionPool", "method_name": "activeSize", "params": []}, "ControlConnection.setPriority(int)": {"calls": [], "called_by": ["ControlConnection.run()"], "class_name": "ControlConnection", "method_name": "setPriority", "params": ["int"]}, "SourceDataConnectionPool.clearActive()": {"calls": ["SMOSConnections.getLastTime()", "SMOSConnections.getConnection()", "SourceDataConnectionPool.release(Connection)"], "called_by": ["ControlConnection.run()"], "class_name": "SourceDataConnectionPool", "method_name": "clearActive", "params": []}, "SourceDataConnectionPool.closeAllInPoolConnections()": {"calls": ["SourceDataConnectionPool.closeAllConnections(List)"], "called_by": ["ControlConnection.run()"], "class_name": "SourceDataConnectionPool", "method_name": "closeAllInPoolConnections", "params": []}, "SMOSConnections.getLastTime()": {"calls": [], "called_by": ["SourceDataConnectionPool.clearActive()"], "class_name": "SMOSConnections", "method_name": "getLastTime", "params": []}, "SMOSConnections.getConnection()": {"calls": [], "called_by": ["SourceDataConnectionPool.clearActive()", "SourceDataConnectionPool.release(Connection)", "SourceDataConnectionPool.getPooledConnection(int)"], "class_name": "SMOSConnections", "method_name": "getConnection", "params": []}, "SourceDataConnectionPool.closeAllConnections()": {"calls": ["SourceDataConnectionPool.closeAllConnections(List)"], "called_by": [], "class_name": "SourceDataConnectionPool", "method_name": "closeAllConnections", "params": []}, "SourceDataConnectionPool.closeAllConnections(List)": {"calls": ["ConnectionWrapper.closeConnectionWrapper()"], "called_by": ["SourceDataConnectionPool.access$100(SourceDataConnectionPool,List)", "SourceDataConnectionPool.closeAllConnections()", "SourceDataConnectionPool.closeAllInPoolConnections()"], "class_name": "SourceDataConnectionPool", "method_name": "closeAllConnections", "params": ["List"]}, "ConnectionWrapper.closeConnectionWrapper()": {"calls": ["ConnectionWrapper.closeAndReleaseStatements()"], "called_by": ["ConnectionWrapper.finalize()", "SourceDataConnectionPool.closeAllConnections(List)"], "class_name": "ConnectionWrapper", "method_name": "closeConnectionWrapper", "params": []}, "SourceDataConnectionPool.createNewConnection()": {"calls": ["SMOSConnections.setLastTime(long)", "SMOSConnections.setConnection(Connection)"], "called_by": ["SourceDataConnectionPool.getConnection()"], "class_name": "SourceDataConnectionPool", "method_name": "createNewConnection", "params": []}, "SMOSConnections.setConnection(Connection)": {"calls": [], "called_by": ["SourceDataConnectionPool.getPooledConnection(int)", "SourceDataConnectionPool.createNewConnection()"], "class_name": "SMOSConnections", "method_name": "setConnection", "params": ["Connection"]}, "SMOSConnections.setLastTime(long)": {"calls": [], "called_by": ["SourceDataConnectionPool.setLastTime(Connection)", "SourceDataConnectionPool.getPooledConnection(int)", "SourceDataConnectionPool.createNewConnection()"], "class_name": "SMOSConnections", "method_name": "setLastTime", "params": ["long"]}, "SourceDataConnectionPool.getPooledConnection(int)": {"calls": ["SMOSConnections.getConnection()", "SMOSConnections.setLastTime(long)", "SMOSConnections.setConnection(Connection)"], "called_by": ["SourceDataConnectionPool.getConnection()"], "class_name": "SourceDataConnectionPool", "method_name": "getPooledConnection", "params": ["int"]}, "SourceDataConnectionPool.setLastTime(Connection)": {"calls": ["SMOSConnections.setLastTime(long)"], "called_by": ["ConnectionWrapper.prepareStatement(String,int,int,int)", "ConnectionWrapper.prepareStatement(String)", "ConnectionWrapper.setCatalog(String)", "ConnectionWrapper.cachePreparedStatement(PreparedStatement)", "ConnectionWrapper.getAutoCommit()", "ConnectionWrapper.prepareStatement(String,int,int)", "ConnectionWrapper.getCatalog()", "ConnectionWrapper.rollback(Savepoint)", "ConnectionWrapper.setReadOnly(boolean)", "ConnectionWrapper.prepareStatement(String,int)", "ConnectionWrapper.createStatement(int,int)", "ConnectionWrapper.prepareStatement(String,int[])", "ConnectionWrapper.getTypeMap()", "ConnectionWrapper.setTransactionIsolation(int)", "ConnectionWrapper.isClosed()", "ConnectionWrapper.releaseSavepoint(Savepoint)", "ConnectionWrapper.isReadOnly()", "ConnectionWrapper.setHoldability(int)", "ConnectionWrapper.prepareCall(String)", "ConnectionWrapper.nativeSQL(String)", "ConnectionWrapper.prepareCall(String,int,int,int)", "ConnectionWrapper.rollback()", "ConnectionWrapper.getTransactionIsolation()", "ConnectionWrapper.setAutoCommit(boolean)", "ConnectionWrapper.getWarnings()", "ConnectionWrapper.setSavepoint()", "ConnectionWrapper.getHoldability()", "ConnectionWrapper.createStatement()", "ConnectionWrapper.cacheStatement(Statement)", "ConnectionWrapper.setSavepoint(String)", "ConnectionWrapper.createStatement(int,int,int)", "ConnectionWrapper.prepareStatement(String,String[])", "ConnectionWrapper.getMetaData()", "ConnectionWrapper.commit()", "ConnectionWrapper.prepareCall(String,int,int)"], "class_name": "SourceDataConnectionPool", "method_name": "setLastTime", "params": ["Connection"]}, "SourceDataConnectionPool.toString()": {"calls": ["SourceDataConnectionPool.poolDimension()", "SourceDataConnectionPool.activeSize()"], "called_by": [], "class_name": "SourceDataConnectionPool", "method_name": "toString", "params": []}, "SourceDataConnectionPool.poolDimension()": {"calls": [], "called_by": ["SourceDataConnectionPool.toString()"], "class_name": "SourceDataConnectionPool", "method_name": "poolDimension", "params": []}, "SourceDataConnectionPool.access$100(SourceDataConnectionPool,List)": {"calls": ["SourceDataConnectionPool.closeAllConnections(List)"], "called_by": [], "class_name": "SourceDataConnectionPool", "method_name": "access$100", "params": ["SourceDataConnectionPool", "List"]}, "ConnectionWrapper.cachePreparedStatement(PreparedStatement)": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)"], "called_by": ["ConnectionWrapper.prepareStatement(String)", "ConnectionWrapper.prepareStatement(String,int[])", "ConnectionWrapper.prepareStatement(String,int,int)", "ConnectionWrapper.prepareStatement(String,String[])", "ConnectionWrapper.prepareStatement(String,int)", "ConnectionWrapper.prepareStatement(String,int,int,int)"], "class_name": "ConnectionWrapper", "method_name": "cachePreparedStatement", "params": ["PreparedStatement"]}, "ConnectionWrapper.cacheStatement(Statement)": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)"], "called_by": ["ConnectionWrapper.createStatement(int,int)", "ConnectionWrapper.createStatement(int,int,int)", "ConnectionWrapper.createStatement()"], "class_name": "ConnectionWrapper", "method_name": "cacheStatement", "params": ["Statement"]}, "ConnectionWrapper.close()": {"calls": ["SourceDataConnectionPool.release(Connection)", "ConnectionWrapper.closeAndReleaseStatements()"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "close", "params": []}, "ConnectionWrapper.closeAndReleaseStatements()": {"calls": [], "called_by": ["ConnectionWrapper.close()", "ConnectionWrapper.closeConnectionWrapper()"], "class_name": "ConnectionWrapper", "method_name": "closeAndReleaseStatements", "params": []}, "ConnectionWrapper.commit()": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "commit", "params": []}, "ConnectionWrapper.createStatement()": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)", "ConnectionWrapper.cacheStatement(Statement)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "createStatement", "params": []}, "ConnectionWrapper.createStatement(int,int)": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)", "ConnectionWrapper.cacheStatement(Statement)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "createStatement", "params": ["int", "int"]}, "ConnectionWrapper.createStatement(int,int,int)": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)", "ConnectionWrapper.cacheStatement(Statement)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "createStatement", "params": ["int", "int", "int"]}, "ConnectionWrapper.finalize()": {"calls": ["ConnectionWrapper.closeConnectionWrapper()"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "finalize", "params": []}, "ConnectionWrapper.getAutoCommit()": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "getAutoCommit", "params": []}, "ConnectionWrapper.getCatalog()": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "getCatalog", "params": []}, "ConnectionWrapper.getHoldability()": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "getHoldability", "params": []}, "ConnectionWrapper.getMetaData()": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "getMetaData", "params": []}, "ConnectionWrapper.getTransactionIsolation()": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "getTransactionIsolation", "params": []}, "ConnectionWrapper.getTypeMap()": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "getTypeMap", "params": []}, "ConnectionWrapper.getWarnings()": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "getWarnings", "params": []}, "ConnectionWrapper.isClosed()": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "isClosed", "params": []}, "ConnectionWrapper.isReadOnly()": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "isReadOnly", "params": []}, "ConnectionWrapper.nativeSQL(String)": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "nativeSQL", "params": ["String"]}, "ConnectionWrapper.prepareCall(String)": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "prepareCall", "params": ["String"]}, "ConnectionWrapper.prepareCall(String,int,int)": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "prepareCall", "params": ["String", "int", "int"]}, "ConnectionWrapper.prepareCall(String,int,int,int)": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "prepareCall", "params": ["String", "int", "int", "int"]}, "ConnectionWrapper.prepareStatement(String)": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)", "ConnectionWrapper.cachePreparedStatement(PreparedStatement)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "prepareStatement", "params": ["String"]}, "ConnectionWrapper.prepareStatement(String,int)": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)", "ConnectionWrapper.cachePreparedStatement(PreparedStatement)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "prepareStatement", "params": ["String", "int"]}, "ConnectionWrapper.prepareStatement(String,int,int)": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)", "ConnectionWrapper.cachePreparedStatement(PreparedStatement)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "prepareStatement", "params": ["String", "int", "int"]}, "ConnectionWrapper.prepareStatement(String,int,int,int)": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)", "ConnectionWrapper.cachePreparedStatement(PreparedStatement)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "prepareStatement", "params": ["String", "int", "int", "int"]}, "ConnectionWrapper.prepareStatement(String,int[])": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)", "ConnectionWrapper.cachePreparedStatement(PreparedStatement)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "prepareStatement", "params": ["String", "int[]"]}, "ConnectionWrapper.prepareStatement(String,String[])": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)", "ConnectionWrapper.cachePreparedStatement(PreparedStatement)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "prepareStatement", "params": ["String", "String[]"]}, "ConnectionWrapper.releaseSavepoint(Savepoint)": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "releaseSavepoint", "params": ["Savepoint"]}, "ConnectionWrapper.rollback()": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "rollback", "params": []}, "ConnectionWrapper.rollback(Savepoint)": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "rollback", "params": ["Savepoint"]}, "ConnectionWrapper.setAutoCommit(boolean)": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "setAutoCommit", "params": ["boolean"]}, "ConnectionWrapper.setCatalog(String)": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "setCatalog", "params": ["String"]}, "ConnectionWrapper.setHoldability(int)": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "setHoldability", "params": ["int"]}, "ConnectionWrapper.setReadOnly(boolean)": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "setReadOnly", "params": ["boolean"]}, "ConnectionWrapper.setSavepoint()": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "setSavepoint", "params": []}, "ConnectionWrapper.setSavepoint(String)": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "setSavepoint", "params": ["String"]}, "ConnectionWrapper.setTransactionIsolation(int)": {"calls": ["SourceDataConnectionPool.setLastTime(Connection)"], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "setTransactionIsolation", "params": ["int"]}, "TestRegistration.main(String[])": {"calls": ["ItemListUsers.getName()", "Utility.eNull(Date)", "Note.setDescription(String)", "RegisterLine.getStudent()", "Absence.setDateOfAbsence(Date)", "Excuse.setIdExcuse(int)", "Absence.setIdExcuse(Integer)", "Delay.setTimeDelay(String)", "Absence.setAcademicYear(int)", "ManagerRegister.insertDelay(Delay)", "ManagerRegister.getRegistrationsPerClassIDEData(int,Date)", "Absence.setIdUser(int)", "Delay.setIdUser(int)", "ManagerRegister.haveDelay(RegisterLine)", "Note.setIdNote(int)", "Note.setTeacher(String)", "Delay.setDateDelay(Date)", "Delay.setAcademicYear(int)", "Excuse.setAcademicYear(int)", "ManagerRegister.haveAbsence(RegisterLine)", "ManagerRegister.getInstance()", "Excuse.setDataExcuse(Date)", "Note.setIdUser(int)", "Note.setAcademicYear(int)", "Excuse.setIdUser(int)", "Note.setDataNote(Date)"], "called_by": [], "class_name": "TestRegistration", "method_name": "main", "params": ["String[]"]}, "ManagerRegister.getInstance()": {"calls": [], "called_by": ["ServletViewRegistration.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveJustify.doGet(HttpServletRequest,HttpServletResponse)", "TestRegistration.main(String[])", "ServletShowDetailsNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertNewNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletViewDetailsJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateJustified.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertJustify.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerRegister", "method_name": "getInstance", "params": []}, "Absence.setIdUser(int)": {"calls": [], "called_by": ["ManagerRegister.loadAbsenceFromRs(ResultSet)", "ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)", "TestRegistration.main(String[])"], "class_name": "Absence", "method_name": "setIdUser", "params": ["int"]}, "Absence.setDateOfAbsence(Date)": {"calls": [], "called_by": ["ManagerRegister.loadAbsenceFromRs(ResultSet)", "ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)", "TestRegistration.main(String[])"], "class_name": "Absence", "method_name": "setDateOfAbsence", "params": ["Date"]}, "Absence.setIdExcuse(Integer)": {"calls": [], "called_by": ["ManagerRegister.loadAbsenceFromRs(ResultSet)", "ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)", "ManagerRegister.removeExcuse(int)", "ManagerRegister.insertExcuse(Excuse,Absence)", "TestRegistration.main(String[])"], "class_name": "Absence", "method_name": "setIdExcuse", "params": ["Integer"]}, "Absence.setAcademicYear(int)": {"calls": [], "called_by": ["ManagerRegister.loadAbsenceFromRs(ResultSet)", "ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)", "TestRegistration.main(String[])"], "class_name": "Absence", "method_name": "setAcademicYear", "params": ["int"]}, "Excuse.setIdUser(int)": {"calls": [], "called_by": ["ManagerRegister.loadJustifyFromRs(ResultSet)", "ServletInsertJustify.doGet(HttpServletRequest,HttpServletResponse)", "TestRegistration.main(String[])"], "class_name": "Excuse", "method_name": "setIdUser", "params": ["int"]}, "Excuse.setDataExcuse(Date)": {"calls": [], "called_by": ["ManagerRegister.loadJustifyFromRs(ResultSet)", "ServletUpdateJustified.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertJustify.doGet(HttpServletRequest,HttpServletResponse)", "TestRegistration.main(String[])"], "class_name": "Excuse", "method_name": "setDataExcuse", "params": ["Date"]}, "Excuse.setAcademicYear(int)": {"calls": [], "called_by": ["ManagerRegister.loadJustifyFromRs(ResultSet)", "ServletUpdateJustified.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertJustify.doGet(HttpServletRequest,HttpServletResponse)", "TestRegistration.main(String[])"], "class_name": "Excuse", "method_name": "setAcademicYear", "params": ["int"]}, "Excuse.setIdExcuse(int)": {"calls": [], "called_by": ["ManagerRegister.loadJustifyFromRs(ResultSet)", "TestRegistration.main(String[])", "ManagerRegister.insertExcuse(Excuse,Absence)"], "class_name": "Excuse", "method_name": "setIdExcuse", "params": ["int"]}, "Delay.setIdUser(int)": {"calls": [], "called_by": ["ManagerRegister.loadDelayFromRs(ResultSet)", "ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)", "TestRegistration.main(String[])"], "class_name": "Delay", "method_name": "setIdUser", "params": ["int"]}, "Delay.setDateDelay(Date)": {"calls": [], "called_by": ["ManagerRegister.loadDelayFromRs(ResultSet)", "ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)", "TestRegistration.main(String[])"], "class_name": "Delay", "method_name": "setDateDelay", "params": ["Date"]}, "Delay.setTimeDelay(String)": {"calls": [], "called_by": ["ManagerRegister.loadDelayFromRs(ResultSet)", "ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)", "TestRegistration.main(String[])"], "class_name": "Delay", "method_name": "setTimeDelay", "params": ["String"]}, "Delay.setAcademicYear(int)": {"calls": [], "called_by": ["ManagerRegister.loadDelayFromRs(ResultSet)", "ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)", "TestRegistration.main(String[])"], "class_name": "Delay", "method_name": "setAcademicYear", "params": ["int"]}, "Note.setIdUser(int)": {"calls": [], "called_by": ["ManagerRegister.loadNoteFromRs(ResultSet)", "ServletShowDetailsNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertNewNote.doGet(HttpServletRequest,HttpServletResponse)", "TestRegistration.main(String[])"], "class_name": "Note", "method_name": "setIdUser", "params": ["int"]}, "Note.setTeacher(String)": {"calls": [], "called_by": ["ManagerRegister.loadNoteFromRs(ResultSet)", "ServletShowDetailsNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertNewNote.doGet(HttpServletRequest,HttpServletResponse)", "TestRegistration.main(String[])"], "class_name": "Note", "method_name": "setTeacher", "params": ["String"]}, "Note.setAcademicYear(int)": {"calls": [], "called_by": ["ManagerRegister.loadNoteFromRs(ResultSet)", "ServletShowDetailsNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertNewNote.doGet(HttpServletRequest,HttpServletResponse)", "TestRegistration.main(String[])"], "class_name": "Note", "method_name": "setAcademicYear", "params": ["int"]}, "Note.setDataNote(Date)": {"calls": [], "called_by": ["ManagerRegister.loadNoteFromRs(ResultSet)", "ServletShowDetailsNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertNewNote.doGet(HttpServletRequest,HttpServletResponse)", "TestRegistration.main(String[])"], "class_name": "Note", "method_name": "setDataNote", "params": ["Date"]}, "Note.setDescription(String)": {"calls": [], "called_by": ["ManagerRegister.loadNoteFromRs(ResultSet)", "ServletShowDetailsNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertNewNote.doGet(HttpServletRequest,HttpServletResponse)", "TestRegistration.main(String[])"], "class_name": "Note", "method_name": "setDescription", "params": ["String"]}, "Note.setIdNote(int)": {"calls": [], "called_by": ["ManagerRegister.loadNoteFromRs(ResultSet)", "ServletShowDetailsNote.doGet(HttpServletRequest,HttpServletResponse)", "ManagerRegister.insertNote(Note)", "TestRegistration.main(String[])"], "class_name": "Note", "method_name": "setIdNote", "params": ["int"]}, "ManagerRegister.insertDelay(Delay)": {"calls": ["Utility.performOperation(Connection,String)", "Utility.getMaximumValue(String,String)", "Delay.getTimeDelay()", "Utility.eNull(String)", "Delay.getIdUser()", "DBConnection.releaseConnections(Connection)", "Utility.eNull(Integer)", "Delay.getDateDelay()", "Delay.setIdDelay(int)", "Utility.eNull(Date)", "DBConnection.getConnection()", "Delay.getAcademicYear()"], "called_by": ["ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)", "TestRegistration.main(String[])"], "class_name": "ManagerRegister", "method_name": "insertDelay", "params": ["Delay"]}, "ManagerRegister.getRegistrationsPerClassIDEData(int,Date)": {"calls": ["ManagerRegister.getAbsencePerIdUserAndData(int,Date)", "RegisterLine.setAbsence(Absence)", "ManagerUser.getInstance()", "RegisterLine.setStudent(ItemListUsers)", "RegisterLine.setDelay(Delay)", "ItemListUsers.getId()", "ManagerRegister.getDelayPerIdUserAndData(int,Date)", "ManagerUser.getStudentPerClassId(int)"], "called_by": ["ServletViewRegistration.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)", "TestRegistration.main(String[])"], "class_name": "ManagerRegister", "method_name": "getRegistrationsPerClassIDEData", "params": ["int", "Date"]}, "RegisterLine.getStudent()": {"calls": [], "called_by": ["ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)", "TestRegistration.main(String[])"], "class_name": "RegisterLine", "method_name": "getStudent", "params": []}, "ItemListUsers.getName()": {"calls": [], "called_by": ["TestRegistration.main(String[])"], "class_name": "ItemListUsers", "method_name": "getName", "params": []}, "ManagerRegister.haveAbsence(RegisterLine)": {"calls": ["RegisterLine.getAbsence()"], "called_by": ["ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)", "TestRegistration.main(String[])"], "class_name": "ManagerRegister", "method_name": "haveAbsence", "params": ["RegisterLine"]}, "ManagerRegister.haveDelay(RegisterLine)": {"calls": ["RegisterLine.getDelay()"], "called_by": ["ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)", "TestRegistration.main(String[])"], "class_name": "ManagerRegister", "method_name": "haveDelay", "params": ["RegisterLine"]}, "Utility.eNull(Date)": {"calls": ["Utility.date2SQLString(Date,boolean)"], "called_by": ["ManagerRegister.getAbsencePerIdUserAndData(int,Date)", "ManagerRegister.updateExcuse(Excuse)", "ManagerRegister.insertExcuse(Excuse,Absence)", "ManagerRegister.updateDelay(Delay)", "ManagerRegister.updateNote(Note)", "ManagerRegister.updateAbsence(Absence)", "TestRegistration.main(String[])", "ManagerRegister.insertNote(Note)", "ManagerRegister.insertAbsence(Absence)", "ManagerRegister.insertDelay(Delay)", "ManagerRegister.getDelayPerIdUserAndData(int,Date)"], "class_name": "Utility", "method_name": "eNull", "params": ["Date"]}, "ManagerTeaching.exists(Teaching)": {"calls": ["Teaching.getName()", "Utility.queryOperation(Connection,String)", "Utility.eNull(String)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": ["ServletUpgradTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertTeaching.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerTeaching", "method_name": "exists", "params": ["Teaching"]}, "Teaching.getName()": {"calls": [], "called_by": ["ManagerTeaching.update(Teaching)", "ManagerTeaching.insert(Teaching)", "ManagerTeaching.exists(Teaching)", "ManagerTeaching.getTeachingId(Teaching)"], "class_name": "Teaching", "method_name": "getName", "params": []}, "ManagerTeaching.insert(Teaching)": {"calls": ["Teaching.getName()", "Utility.performOperation(Connection,String)", "Utility.getMaximumValue(String,String)", "Teaching.setId(int)", "Utility.eNull(String)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": ["ServletInsertTeaching.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerTeaching", "method_name": "insert", "params": ["Teaching"]}, "ManagerTeaching.update(Teaching)": {"calls": ["Teaching.getName()", "Utility.performOperation(Connection,String)", "DBConnection.releaseConnections(Connection)", "Utility.eNull(Integer)", "Utility.eNull(String)", "Teaching.getId()", "DBConnection.getConnection()"], "called_by": ["ServletUpgradTeaching.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerTeaching", "method_name": "update", "params": ["Teaching"]}, "ManagerTeaching.remove(Teaching)": {"calls": ["Utility.performOperation(Connection,String)", "DBConnection.releaseConnections(Connection)", "Utility.eNull(Integer)", "Teaching.getId()", "DBConnection.getConnection()"], "called_by": ["ServletRemoveTeaching.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerTeaching", "method_name": "remove", "params": ["Teaching"]}, "ManagerTeaching.getTeachingId(Teaching)": {"calls": ["Teaching.getName()", "Utility.queryOperation(Connection,String)", "Utility.eNull(String)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": ["ServletUpgradTeaching.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerTeaching", "method_name": "getTeachingId", "params": ["Teaching"]}, "ManagerTeaching.getTeachingNamePerId(int)": {"calls": ["Utility.queryOperation(Connection,String)", "Utility.eNull(Integer)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": [], "class_name": "ManagerTeaching", "method_name": "getTeachingNamePerId", "params": ["int"]}, "ManagerTeaching.getTeachingPerId(int)": {"calls": ["Utility.queryOperation(Connection,String)", "ManagerTeaching.loadRecordFromRs(ResultSet)", "Utility.eNull(Integer)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": ["ServletAddTeachingToTeacher.doGet(HttpServletRequest,HttpServletResponse)", "ServletAddRemoveTeachingsToStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTeachingPerTeacher.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerTeaching", "method_name": "getTeachingPerId", "params": ["int"]}, "ManagerTeaching.loadRecordFromRs(ResultSet)": {"calls": ["Teaching.setName(String)", "Teaching.setId(int)"], "called_by": ["ManagerTeaching.getTeachingPerId(int)", "ManagerTeaching.loadRecordsFromRs(ResultSet)"], "class_name": "ManagerTeaching", "method_name": "loadRecordFromRs", "params": ["ResultSet"]}, "ManagerTeaching.getTeachings()": {"calls": ["Utility.queryOperation(Connection,String)", "ManagerTeaching.loadRecordsFromRs(ResultSet)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": ["ServletShowListTeachings.doGet(HttpServletRequest,HttpServletResponse)", "ServletStreetAddressTeachings.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerTeaching", "method_name": "getTeachings", "params": []}, "ManagerTeaching.loadRecordsFromRs(ResultSet)": {"calls": ["ManagerTeaching.loadRecordFromRs(ResultSet)"], "called_by": ["ManagerTeaching.getTeachingsPerUserClassID(int,int)", "ManagerTeaching.getTeachings()", "ManagerTeaching.getTeachingsPerUserId(int)", "ManagerTeaching.getTeachingsPerIdUserIdClass(int,int)", "ManagerTeaching.getTeachingsPerClassId(int)", "ManagerTeaching.getTeachingsPerClassName(String)"], "class_name": "ManagerTeaching", "method_name": "loadRecordsFromRs", "params": ["ResultSet"]}, "ManagerTeaching.getTeachingsPerUserId(int)": {"calls": ["Utility.queryOperation(Connection,String)", "ManagerTeaching.loadRecordsFromRs(ResultSet)", "Utility.eNull(Integer)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": [], "class_name": "ManagerTeaching", "method_name": "getTeachingsPerUserId", "params": ["int"]}, "ManagerTeaching.getTeachingsPerUserClassID(int,int)": {"calls": ["Utility.queryOperation(Connection,String)", "ManagerTeaching.loadRecordsFromRs(ResultSet)", "Utility.eNull(Integer)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": [], "class_name": "ManagerTeaching", "method_name": "getTeachingsPerUserClassID", "params": ["int", "int"]}, "ManagerTeaching.hasTeacher(Teaching)": {"calls": ["Utility.queryOperation(Connection,String)", "DBConnection.releaseConnections(Connection)", "Utility.eNull(Integer)", "Teaching.getId()", "DBConnection.getConnection()"], "called_by": [], "class_name": "ManagerTeaching", "method_name": "hasTeacher", "params": ["Teaching"]}, "ManagerTeaching.getTeachingsPerClassId(int)": {"calls": ["Utility.queryOperation(Connection,String)", "ManagerTeaching.loadRecordsFromRs(ResultSet)", "Utility.eNull(Integer)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": ["ServletInsertSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletSchoolReportUpdate.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadListOfTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowTeacherModulePerClass.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerTeaching", "method_name": "getTeachingsPerClassId", "params": ["int"]}, "ManagerTeaching.getTeachingsPerClassName(String)": {"calls": ["Utility.queryOperation(Connection,String)", "ManagerTeaching.loadRecordsFromRs(ResultSet)", "Utility.eNull(String)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": [], "class_name": "ManagerTeaching", "method_name": "getTeachingsPerClassName", "params": ["String"]}, "ManagerTeaching.getTeachingsPerIdUserIdClass(int,int)": {"calls": ["Utility.queryOperation(Connection,String)", "ManagerTeaching.loadRecordsFromRs(ResultSet)", "Utility.eNull(Integer)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": [], "class_name": "ManagerTeaching", "method_name": "getTeachingsPerIdUserIdClass", "params": ["int", "int"]}, "Teaching.setName(String)": {"calls": [], "called_by": ["ManagerTeaching.loadRecordFromRs(ResultSet)", "ServletUpgradTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertTeaching.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "Teaching", "method_name": "setName", "params": ["String"]}, "ManagerStreetAddress.hasTeaching(Teaching,StreetAddress)": {"calls": ["Utility.queryOperation(Connection,String)", "DBConnection.releaseConnections(Connection)", "Utility.eNull(Integer)", "StreetAddress.getIdStreetAddress()", "Teaching.getId()", "DBConnection.getConnection()"], "called_by": ["ServletAddRemoveTeachingsToStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ManagerStreetAddress.removeTeachingAsStreetAddress(StreetAddress,Teaching)", "ManagerStreetAddress.assignTeachingAsStreetAddress(StreetAddress,Teaching)"], "class_name": "ManagerStreetAddress", "method_name": "hasTeaching", "params": ["Teaching", "StreetAddress"]}, "StreetAddress.getIdStreetAddress()": {"calls": [], "called_by": ["ManagerStreetAddress.removeTeachingAsStreetAddress(StreetAddress,Teaching)", "ManagerStreetAddress.assignTeachingAsStreetAddress(StreetAddress,Teaching)", "ManagerStreetAddress.delete(StreetAddress)", "ManagerStreetAddress.hasTeaching(Teaching,StreetAddress)"], "class_name": "StreetAddress", "method_name": "getIdStreetAddress", "params": []}, "ManagerStreetAddress.exists(StreetAddress)": {"calls": ["Utility.queryOperation(Connection,String)", "StreetAddress.getName()", "Utility.eNull(String)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": ["ServletInsertStreetAddress.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerStreetAddress", "method_name": "exists", "params": ["StreetAddress"]}, "StreetAddress.getName()": {"calls": [], "called_by": ["ManagerStreetAddress.insert(StreetAddress)", "ManagerStreetAddress.getStreetAddressId(StreetAddress)", "ManagerStreetAddress.exists(StreetAddress)"], "class_name": "StreetAddress", "method_name": "getName", "params": []}, "ManagerStreetAddress.insert(StreetAddress)": {"calls": ["StreetAddress.setIdStreetAddress(int)", "Utility.performOperation(Connection,String)", "Utility.getMaximumValue(String,String)", "StreetAddress.getName()", "Utility.eNull(String)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": ["ServletInsertStreetAddress.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerStreetAddress", "method_name": "insert", "params": ["StreetAddress"]}, "StreetAddress.setIdStreetAddress(int)": {"calls": [], "called_by": ["ManagerStreetAddress.insert(StreetAddress)", "ManagerStreetAddress.loadRecordFromRs(ResultSet)"], "class_name": "StreetAddress", "method_name": "setIdStreetAddress", "params": ["int"]}, "ManagerStreetAddress.delete(StreetAddress)": {"calls": ["Utility.performOperation(Connection,String)", "Utility.eNull(Integer)", "StreetAddress.getIdStreetAddress()", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": ["ServletRemoveStreetAddress.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerStreetAddress", "method_name": "delete", "params": ["StreetAddress"]}, "ManagerStreetAddress.assignTeachingAsStreetAddress(StreetAddress,Teaching)": {"calls": ["Utility.performOperation(Connection,String)", "ManagerStreetAddress.getInstance()", "DBConnection.releaseConnections(Connection)", "ManagerStreetAddress.hasTeaching(Teaching,StreetAddress)", "Utility.eNull(Integer)", "StreetAddress.getIdStreetAddress()", "Teaching.getId()", "DBConnection.getConnection()"], "called_by": ["ServletAddRemoveTeachingsToStreetAddress.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerStreetAddress", "method_name": "assignTeachingAsStreetAddress", "params": ["StreetAddress", "Teaching"]}, "ManagerStreetAddress.getInstance()": {"calls": [], "called_by": ["ServletShowListAdresses.doGet(HttpServletRequest,HttpServletResponse)", "ManagerStreetAddress.removeTeachingAsStreetAddress(StreetAddress,Teaching)", "ManagerStreetAddress.assignTeachingAsStreetAddress(StreetAddress,Teaching)", "ServletAddRemoveTeachingsToStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveStreetAddress.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerStreetAddress", "method_name": "getInstance", "params": []}, "ManagerStreetAddress.removeTeachingAsStreetAddress(StreetAddress,Teaching)": {"calls": ["Utility.performOperation(Connection,String)", "ManagerStreetAddress.getInstance()", "DBConnection.releaseConnections(Connection)", "ManagerStreetAddress.hasTeaching(Teaching,StreetAddress)", "Utility.eNull(Integer)", "StreetAddress.getIdStreetAddress()", "Teaching.getId()", "DBConnection.getConnection()"], "called_by": ["ServletAddRemoveTeachingsToStreetAddress.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerStreetAddress", "method_name": "removeTeachingAsStreetAddress", "params": ["StreetAddress", "Teaching"]}, "ManagerStreetAddress.getStreetAddressId(StreetAddress)": {"calls": ["Utility.queryOperation(Connection,String)", "StreetAddress.getName()", "Utility.eNull(String)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": [], "class_name": "ManagerStreetAddress", "method_name": "getStreetAddressId", "params": ["StreetAddress"]}, "ManagerStreetAddress.getStreetAddressPerId(int)": {"calls": ["Utility.queryOperation(Connection,String)", "ManagerStreetAddress.loadRecordFromRs(ResultSet)", "Utility.eNull(Integer)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": ["ServletShowDetailsStreetAddress.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerStreetAddress", "method_name": "getStreetAddressPerId", "params": ["int"]}, "ManagerStreetAddress.loadRecordFromRs(ResultSet)": {"calls": ["StreetAddress.setIdStreetAddress(int)", "StreetAddress.setName(String)"], "called_by": ["ManagerStreetAddress.loadRecordsFromRs(ResultSet)", "ManagerStreetAddress.getStreetAddressPerId(int)"], "class_name": "ManagerStreetAddress", "method_name": "loadRecordFromRs", "params": ["ResultSet"]}, "ManagerStreetAddress.getStreetAddressElenco()": {"calls": ["ManagerStreetAddress.loadRecordsFromRs(ResultSet)", "Utility.queryOperation(Connection,String)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": ["ServletShowListAdresses.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerStreetAddress", "method_name": "getStreetAddressElenco", "params": []}, "ManagerStreetAddress.loadRecordsFromRs(ResultSet)": {"calls": ["ManagerStreetAddress.loadRecordFromRs(ResultSet)"], "called_by": ["ManagerStreetAddress.getStreetAddressElenco()"], "class_name": "ManagerStreetAddress", "method_name": "loadRecordsFromRs", "params": ["ResultSet"]}, "ManagerStreetAddress.getNameStreetAddressPerId(int)": {"calls": ["Utility.queryOperation(Connection,String)", "Utility.eNull(Integer)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": [], "class_name": "ManagerStreetAddress", "method_name": "getNameStreetAddressPerId", "params": ["int"]}, "ManagerStreetAddress.getTeachingsStreetAddress(int)": {"calls": ["Utility.queryOperation(Connection,String)", "Utility.eNull(Integer)", "ManagerStreetAddress.loadIntegersFromRs(ResultSet)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": [], "class_name": "ManagerStreetAddress", "method_name": "getTeachingsStreetAddress", "params": ["int"]}, "ManagerStreetAddress.loadIntegersFromRs(ResultSet)": {"calls": [], "called_by": ["ManagerStreetAddress.getTeachingsStreetAddress(int)"], "class_name": "ManagerStreetAddress", "method_name": "loadIntegersFromRs", "params": ["ResultSet"]}, "StreetAddress.setName(String)": {"calls": [], "called_by": ["ServletInsertStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ManagerStreetAddress.loadRecordFromRs(ResultSet)"], "class_name": "StreetAddress", "method_name": "setName", "params": ["String"]}, "ManagerRegister.exists(Absence)": {"calls": ["Utility.queryOperation(Connection,String)", "Absence.getIdAbsence()", "Utility.eNull(Integer)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": ["ManagerRegister.haveExcuse(Absence)", "ServletInsertJustify.doGet(HttpServletRequest,HttpServletResponse)", "ManagerRegister.getExcusePerAbsence(Absence)"], "class_name": "ManagerRegister", "method_name": "exists", "params": ["Absence"]}, "Absence.getIdAbsence()": {"calls": [], "called_by": ["ManagerRegister.updateAbsence(Absence)", "ManagerRegister.removeAbsence(Absence)", "ManagerRegister.exists(Absence)"], "class_name": "Absence", "method_name": "getIdAbsence", "params": []}, "ManagerRegister.exists(Delay)": {"calls": ["Utility.queryOperation(Connection,String)", "Delay.getIdDelay()", "Utility.eNull(Integer)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": [], "class_name": "ManagerRegister", "method_name": "exists", "params": ["Delay"]}, "Delay.getIdDelay()": {"calls": [], "called_by": ["ManagerRegister.removeDelay(Delay)", "ManagerRegister.updateDelay(Delay)", "ManagerRegister.exists(Delay)"], "class_name": "Delay", "method_name": "getIdDelay", "params": []}, "ManagerRegister.exists(Excuse)": {"calls": ["Excuse.getIdExcuse()", "Utility.queryOperation(Connection,String)", "Utility.eNull(Integer)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": ["ServletUpdateJustified.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveJustify.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerRegister", "method_name": "exists", "params": ["Excuse"]}, "Excuse.getIdExcuse()": {"calls": [], "called_by": ["ManagerRegister.insertExcuse(Excuse,Absence)", "ServletRemoveJustify.doGet(HttpServletRequest,HttpServletResponse)", "ManagerRegister.updateExcuse(Excuse)", "ManagerRegister.exists(Excuse)"], "class_name": "Excuse", "method_name": "getIdExcuse", "params": []}, "ManagerRegister.insertAbsence(Absence)": {"calls": ["Absence.getIdExcuse()", "Absence.getIdUser()", "Absence.setIdAbsence(int)", "Absence.getDateOfAbsence()", "Absence.getAcademicYear()", "Utility.performOperation(Connection,String)", "Utility.getMaximumValue(String,String)", "DBConnection.releaseConnections(Connection)", "Utility.eNull(Integer)", "Utility.eNull(Date)", "DBConnection.getConnection()"], "called_by": ["ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerRegister", "method_name": "insertAbsence", "params": ["Absence"]}, "Absence.getIdUser()": {"calls": [], "called_by": ["ManagerRegister.insertAbsence(Absence)", "ManagerRegister.updateAbsence(Absence)"], "class_name": "Absence", "method_name": "getIdUser", "params": []}, "Absence.getDateOfAbsence()": {"calls": [], "called_by": ["ManagerRegister.insertAbsence(Absence)", "ManagerRegister.updateAbsence(Absence)"], "class_name": "Absence", "method_name": "getDateOfAbsence", "params": []}, "Absence.getIdExcuse()": {"calls": [], "called_by": ["ManagerRegister.insertAbsence(Absence)", "ManagerRegister.haveExcuse(Absence)", "ManagerRegister.removeAbsence(Absence)", "ManagerRegister.updateAbsence(Absence)", "ManagerRegister.getExcusePerAbsence(Absence)"], "class_name": "Absence", "method_name": "getIdExcuse", "params": []}, "Absence.getAcademicYear()": {"calls": [], "called_by": ["ManagerRegister.insertAbsence(Absence)", "ManagerRegister.updateAbsence(Absence)"], "class_name": "Absence", "method_name": "getAcademicYear", "params": []}, "Absence.setIdAbsence(int)": {"calls": [], "called_by": ["ManagerRegister.loadAbsenceFromRs(ResultSet)", "ManagerRegister.insertAbsence(Absence)"], "class_name": "Absence", "method_name": "setIdAbsence", "params": ["int"]}, "Delay.getIdUser()": {"calls": [], "called_by": ["ManagerRegister.updateDelay(Delay)", "ManagerRegister.insertDelay(Delay)"], "class_name": "Delay", "method_name": "getIdUser", "params": []}, "Delay.getDateDelay()": {"calls": [], "called_by": ["ManagerRegister.updateDelay(Delay)", "ManagerRegister.insertDelay(Delay)"], "class_name": "Delay", "method_name": "getDateDelay", "params": []}, "Delay.getTimeDelay()": {"calls": [], "called_by": ["ManagerRegister.updateDelay(Delay)", "ManagerRegister.insertDelay(Delay)"], "class_name": "Delay", "method_name": "getTimeDelay", "params": []}, "Delay.getAcademicYear()": {"calls": [], "called_by": ["ManagerRegister.updateDelay(Delay)", "ManagerRegister.insertDelay(Delay)"], "class_name": "Delay", "method_name": "getAcademicYear", "params": []}, "Delay.setIdDelay(int)": {"calls": [], "called_by": ["ManagerRegister.loadDelayFromRs(ResultSet)", "ManagerRegister.insertDelay(Delay)"], "class_name": "Delay", "method_name": "setIdDelay", "params": ["int"]}, "ManagerRegister.insertNote(Note)": {"calls": ["Note.getDescription()", "Note.getAcademicYear()", "Note.getDataNote()", "Utility.performOperation(Connection,String)", "Utility.getMaximumValue(String,String)", "Note.getIdUser()", "Note.setIdNote(int)", "DBConnection.releaseConnections(Connection)", "Note.getTeacher()", "Utility.eNull(Integer)", "Utility.eNull(String)", "Utility.eNull(Date)", "DBConnection.getConnection()"], "called_by": ["ServletInsertNewNote.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerRegister", "method_name": "insertNote", "params": ["Note"]}, "Note.getDescription()": {"calls": [], "called_by": ["ManagerRegister.insertNote(Note)", "ManagerRegister.updateNote(Note)"], "class_name": "Note", "method_name": "getDescription", "params": []}, "Note.getTeacher()": {"calls": [], "called_by": ["ManagerRegister.insertNote(Note)", "ManagerRegister.updateNote(Note)"], "class_name": "Note", "method_name": "getTeacher", "params": []}, "Note.getIdUser()": {"calls": [], "called_by": ["ManagerRegister.insertNote(Note)", "ManagerRegister.updateNote(Note)"], "class_name": "Note", "method_name": "getIdUser", "params": []}, "Note.getDataNote()": {"calls": [], "called_by": ["ManagerRegister.insertNote(Note)", "ManagerRegister.updateNote(Note)"], "class_name": "Note", "method_name": "getDataNote", "params": []}, "Note.getAcademicYear()": {"calls": [], "called_by": ["ManagerRegister.insertNote(Note)", "ManagerRegister.updateNote(Note)"], "class_name": "Note", "method_name": "getAcademicYear", "params": []}, "ManagerRegister.insertExcuse(Excuse,Absence)": {"calls": ["Utility.performOperation(Connection,String)", "Utility.getMaximumValue(String,String)", "Excuse.getIdUser()", "ManagerRegister.updateAbsence(Absence)", "Absence.setIdExcuse(Integer)", "Excuse.getAcademicYear()", "DBConnection.releaseConnections(Connection)", "Excuse.getIdExcuse()", "Excuse.getDataExcuse()", "Utility.eNull(Integer)", "Excuse.setIdExcuse(int)", "Utility.eNull(Date)", "DBConnection.getConnection()"], "called_by": ["ServletInsertJustify.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerRegister", "method_name": "insertExcuse", "params": ["Excuse", "Absence"]}, "Excuse.getIdUser()": {"calls": [], "called_by": ["ManagerRegister.updateExcuse(Excuse)", "ManagerRegister.insertExcuse(Excuse,Absence)"], "class_name": "Excuse", "method_name": "getIdUser", "params": []}, "Excuse.getDataExcuse()": {"calls": [], "called_by": ["ManagerRegister.updateExcuse(Excuse)", "ManagerRegister.insertExcuse(Excuse,Absence)"], "class_name": "Excuse", "method_name": "getDataExcuse", "params": []}, "Excuse.getAcademicYear()": {"calls": [], "called_by": ["ManagerRegister.updateExcuse(Excuse)", "ManagerRegister.insertExcuse(Excuse,Absence)"], "class_name": "Excuse", "method_name": "getAcademicYear", "params": []}, "ManagerRegister.updateAbsence(Absence)": {"calls": ["Absence.getIdExcuse()", "Absence.getIdUser()", "Absence.getDateOfAbsence()", "Absence.getAcademicYear()", "Utility.performOperation(Connection,String)", "Absence.getIdAbsence()", "DBConnection.releaseConnections(Connection)", "Utility.eNull(Integer)", "Utility.eNull(Date)", "DBConnection.getConnection()"], "called_by": ["ManagerRegister.removeExcuse(int)", "ManagerRegister.insertExcuse(Excuse,Absence)"], "class_name": "ManagerRegister", "method_name": "updateAbsence", "params": ["Absence"]}, "ManagerRegister.removeAbsence(Absence)": {"calls": ["Absence.getIdExcuse()", "Utility.performOperation(Connection,String)", "ManagerRegister.removeExcuse(int)", "Absence.getIdAbsence()", "Utility.eNull(Integer)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": ["ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerRegister", "method_name": "removeAbsence", "params": ["Absence"]}, "ManagerRegister.removeExcuse(int)": {"calls": ["Utility.performOperation(Connection,String)", "DBConnection.releaseConnections(Connection)", "Utility.eNull(Integer)", "ManagerRegister.getAbsencePerIdExcuse(int)", "DBConnection.getConnection()", "ManagerRegister.updateAbsence(Absence)", "Absence.setIdExcuse(Integer)"], "called_by": ["ServletRemoveJustify.doGet(HttpServletRequest,HttpServletResponse)", "ManagerRegister.removeAbsence(Absence)"], "class_name": "ManagerRegister", "method_name": "removeExcuse", "params": ["int"]}, "ManagerRegister.removeDelay(Delay)": {"calls": ["Utility.performOperation(Connection,String)", "Delay.getIdDelay()", "Utility.eNull(Integer)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": ["ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerRegister", "method_name": "removeDelay", "params": ["Delay"]}, "ManagerRegister.removeNote(Note)": {"calls": ["Utility.performOperation(Connection,String)", "Note.getIdNote()", "Utility.eNull(Integer)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": ["ServletRemoveNote.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerRegister", "method_name": "removeNote", "params": ["Note"]}, "Note.getIdNote()": {"calls": [], "called_by": ["ServletShowDetailsNote.doGet(HttpServletRequest,HttpServletResponse)", "ManagerRegister.updateNote(Note)", "ManagerRegister.removeNote(Note)"], "class_name": "Note", "method_name": "getIdNote", "params": []}, "ManagerRegister.getAbsencePerIdExcuse(int)": {"calls": ["ManagerRegister.loadAbsenceFromRs(ResultSet)", "Utility.queryOperation(Connection,String)", "Utility.eNull(Integer)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": ["ManagerRegister.removeExcuse(int)"], "class_name": "ManagerRegister", "method_name": "getAbsencePerIdExcuse", "params": ["int"]}, "ManagerRegister.updateDelay(Delay)": {"calls": ["Utility.performOperation(Connection,String)", "Delay.getIdDelay()", "Delay.getTimeDelay()", "Utility.eNull(String)", "Delay.getIdUser()", "DBConnection.releaseConnections(Connection)", "Utility.eNull(Integer)", "Delay.getDateDelay()", "Utility.eNull(Date)", "DBConnection.getConnection()", "Delay.getAcademicYear()"], "called_by": ["ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerRegister", "method_name": "updateDelay", "params": ["Delay"]}, "ManagerRegister.updateNote(Note)": {"calls": ["Note.getDescription()", "Note.getAcademicYear()", "Note.getDataNote()", "Utility.performOperation(Connection,String)", "Note.getIdUser()", "DBConnection.releaseConnections(Connection)", "Note.getTeacher()", "Note.getIdNote()", "Utility.eNull(Integer)", "Utility.eNull(String)", "Utility.eNull(Date)", "DBConnection.getConnection()"], "called_by": ["ServletShowDetailsNote.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerRegister", "method_name": "updateNote", "params": ["Note"]}, "ManagerRegister.updateExcuse(Excuse)": {"calls": ["Utility.performOperation(Connection,String)", "Excuse.getIdUser()", "DBConnection.releaseConnections(Connection)", "Excuse.getAcademicYear()", "Excuse.getIdExcuse()", "Excuse.getDataExcuse()", "Utility.eNull(Integer)", "Utility.eNull(Date)", "DBConnection.getConnection()"], "called_by": ["ServletUpdateJustified.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerRegister", "method_name": "updateExcuse", "params": ["Excuse"]}, "ManagerRegister.getNotePerId(int)": {"calls": ["Utility.queryOperation(Connection,String)", "DBConnection.releaseConnections(Connection)", "Utility.eNull(Integer)", "DBConnection.getConnection()", "ManagerRegister.loadNoteFromRs(ResultSet)"], "called_by": ["ServletShowDetailsNote.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerRegister", "method_name": "getNotePerId", "params": ["int"]}, "ManagerRegister.loadNoteFromRs(ResultSet)": {"calls": ["Note.setTeacher(String)", "Note.setDescription(String)", "Note.setIdNote(int)", "Note.setIdUser(int)", "Note.setAcademicYear(int)", "Note.setDataNote(Date)"], "called_by": ["ManagerRegister.getNotePerIdUserAndAcademicYear(int,int)", "ManagerRegister.getNotePerId(int)"], "class_name": "ManagerRegister", "method_name": "loadNoteFromRs", "params": ["ResultSet"]}, "ManagerRegister.loadAbsenceFromRs(ResultSet)": {"calls": ["Absence.setIdAbsence(int)", "Absence.setIdUser(int)", "Absence.setAcademicYear(int)", "Absence.setDateOfAbsence(Date)", "Absence.setIdExcuse(Integer)"], "called_by": ["ManagerRegister.getAbsencePerIdUserAndAcademicYear(int,int)", "ManagerRegister.getAbsencePerIdExcuse(int)", "ManagerRegister.getAbsencePerIdAbsence(int)", "ManagerRegister.getAbsencePerIdUserAndData(int,Date)"], "class_name": "ManagerRegister", "method_name": "loadAbsenceFromRs", "params": ["ResultSet"]}, "ManagerRegister.getAbsencePerIdAbsence(int)": {"calls": ["ManagerRegister.loadAbsenceFromRs(ResultSet)", "Utility.queryOperation(Connection,String)", "Utility.eNull(Integer)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": ["ServletInsertJustify.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerRegister", "method_name": "getAbsencePerIdAbsence", "params": ["int"]}, "ManagerRegister.getDelayPerId(int)": {"calls": ["ManagerRegister.loadDelayFromRs(ResultSet)", "Utility.queryOperation(Connection,String)", "Utility.eNull(Integer)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": [], "class_name": "ManagerRegister", "method_name": "getDelayPerId", "params": ["int"]}, "ManagerRegister.loadDelayFromRs(ResultSet)": {"calls": ["Delay.setIdUser(int)", "Delay.setTimeDelay(String)", "Delay.setDateDelay(Date)", "Delay.setIdDelay(int)", "Delay.setAcademicYear(int)"], "called_by": ["ManagerRegister.getDelayPerId(int)", "ManagerRegister.getDelayPerIdUserAndData(int,Date)"], "class_name": "ManagerRegister", "method_name": "loadDelayFromRs", "params": ["ResultSet"]}, "ManagerRegister.getExcusePerIdExcuse(int)": {"calls": ["Utility.queryOperation(Connection,String)", "ManagerRegister.loadJustifyFromRs(ResultSet)", "Utility.eNull(Integer)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": ["ServletViewDetailsJustify.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerRegister", "method_name": "getExcusePerIdExcuse", "params": ["int"]}, "ManagerRegister.loadJustifyFromRs(ResultSet)": {"calls": ["Excuse.setDataExcuse(Date)", "Excuse.setIdExcuse(int)", "Excuse.setAcademicYear(int)", "Excuse.setIdUser(int)"], "called_by": ["ManagerRegister.getExcusePerIdExcuse(int)", "ManagerRegister.getExcusePerAbsence(Absence)"], "class_name": "ManagerRegister", "method_name": "loadJustifyFromRs", "params": ["ResultSet"]}, "ManagerRegister.haveExcuse(Absence)": {"calls": ["Absence.getIdExcuse()", "ManagerRegister.exists(Absence)"], "called_by": [], "class_name": "ManagerRegister", "method_name": "haveExcuse", "params": ["Absence"]}, "ManagerRegister.getExcusePerAbsence(Absence)": {"calls": ["Absence.getIdExcuse()", "Utility.queryOperation(Connection,String)", "ManagerRegister.exists(Absence)", "ManagerRegister.loadJustifyFromRs(ResultSet)", "Utility.eNull(Integer)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": [], "class_name": "ManagerRegister", "method_name": "getExcusePerAbsence", "params": ["Absence"]}, "ManagerRegister.getAbsencePerIdUserAndAcademicYear(int,int)": {"calls": ["ManagerRegister.loadAbsenceFromRs(ResultSet)", "Utility.queryOperation(Connection,String)", "Utility.eNull(Integer)", "DBConnection.getConnection()", "DBConnection.releaseConnections(Connection)"], "called_by": ["ServletShowListJustify.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerRegister", "method_name": "getAbsencePerIdUserAndAcademicYear", "params": ["int", "int"]}, "ManagerRegister.getNotePerIdUserAndAcademicYear(int,int)": {"calls": ["Utility.queryOperation(Connection,String)", "DBConnection.releaseConnections(Connection)", "Utility.eNull(Integer)", "DBConnection.getConnection()", "ManagerRegister.loadNoteFromRs(ResultSet)"], "called_by": ["ServletShowListNote.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerRegister", "method_name": "getNotePerIdUserAndAcademicYear", "params": ["int", "int"]}, "ManagerRegister.getAbsencePerIdUserAndData(int,Date)": {"calls": ["ManagerRegister.loadAbsenceFromRs(ResultSet)", "Utility.queryOperation(Connection,String)", "DBConnection.releaseConnections(Connection)", "Utility.eNull(Integer)", "Utility.eNull(Date)", "DBConnection.getConnection()"], "called_by": ["ManagerRegister.getRegistrationsPerClassIDEData(int,Date)"], "class_name": "ManagerRegister", "method_name": "getAbsencePerIdUserAndData", "params": ["int", "Date"]}, "ManagerRegister.getDelayPerIdUserAndData(int,Date)": {"calls": ["ManagerRegister.loadDelayFromRs(ResultSet)", "Utility.queryOperation(Connection,String)", "DBConnection.releaseConnections(Connection)", "Utility.eNull(Integer)", "Utility.eNull(Date)", "DBConnection.getConnection()"], "called_by": ["ManagerRegister.getRegistrationsPerClassIDEData(int,Date)"], "class_name": "ManagerRegister", "method_name": "getDelayPerIdUserAndData", "params": ["int", "Date"]}, "ManagerUser.getStudentPerClassId(int)": {"calls": [], "called_by": ["ServletRemoveTheStudentClassroom.doGet(HttpServletRequest,HttpServletResponse)", "ManagerRegister.getRegistrationsPerClassIDEData(int,Date)", "ServletShowStudentsPerClass.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "getStudentPerClassId", "params": ["int"]}, "RegisterLine.setStudent(ItemListUsers)": {"calls": [], "called_by": ["ManagerRegister.getRegistrationsPerClassIDEData(int,Date)"], "class_name": "RegisterLine", "method_name": "setStudent", "params": ["ItemListUsers"]}, "RegisterLine.setAbsence(Absence)": {"calls": [], "called_by": ["ManagerRegister.getRegistrationsPerClassIDEData(int,Date)"], "class_name": "RegisterLine", "method_name": "setAbsence", "params": ["Absence"]}, "RegisterLine.setDelay(Delay)": {"calls": [], "called_by": ["ManagerRegister.getRegistrationsPerClassIDEData(int,Date)"], "class_name": "RegisterLine", "method_name": "setDelay", "params": ["Delay"]}, "RegisterLine.getAbsence()": {"calls": [], "called_by": ["ManagerRegister.haveAbsence(RegisterLine)", "ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "RegisterLine", "method_name": "getAbsence", "params": []}, "RegisterLine.getDelay()": {"calls": [], "called_by": ["ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)", "ManagerRegister.haveDelay(RegisterLine)"], "class_name": "RegisterLine", "method_name": "getDelay", "params": []}, "Utility.sostituireTuttoStrings(String,String,String)": {"calls": [], "called_by": ["Utility.eNull(String)"], "class_name": "Utility", "method_name": "sostituireTuttoStrings", "params": ["String", "String", "String"]}, "Utility.date2SQLString(Date,boolean)": {"calls": [], "called_by": ["Utility.eNull(Date)"], "class_name": "Utility", "method_name": "date2SQLString", "params": ["Date", "boolean"]}, "MailUtility.sendMail(String,String,String,String)": {"calls": ["Utility.getServerSmtp()"], "called_by": [], "class_name": "MailUtility", "method_name": "sendMail", "params": ["String", "String", "String", "String"]}, "Utility.getServerSmtp()": {"calls": [], "called_by": ["MailUtility.sendMail(String,String,String,String)"], "class_name": "Utility", "method_name": "getServerSmtp", "params": []}, "User.toString()": {"calls": ["User.getFirstName()", "User.getSurname()"], "called_by": [], "class_name": "User", "method_name": "toString", "params": []}, "User.getFirstName()": {"calls": [], "called_by": ["User.toString()"], "class_name": "User", "method_name": "getFirstName", "params": []}, "User.getSurname()": {"calls": [], "called_by": ["User.toString()"], "class_name": "User", "method_name": "getSurname", "params": []}, "SchoolReport.ToString()": {"calls": ["Grade.toString()"], "called_by": [], "class_name": "SchoolReport", "method_name": "ToString", "params": []}, "Grade.toString()": {"calls": [], "called_by": ["SchoolReport.ToString()"], "class_name": "Grade", "method_name": "toString", "params": []}, "ServletCancelSchoolReport.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerGrade.removeGradePerUserIdYearRotation(int,int,int)", "ManagerUser.getInstance()", "ItemListUsers.getId()", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()", "ManagerGrade.getInstance()"], "called_by": ["ServletCancelSchoolReport.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletCancelSchoolReport", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ManagerUser.eAdministrator(User)": {"calls": [], "called_by": ["ServletAddTeachingToTeacher.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletCancelSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListTeachings.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletSchoolReportUpdate.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignStudentParent.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTheStudentClassroom.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadClassPerAcademicYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsOfClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTeachingPerTeacher.doGet(HttpServletRequest,HttpServletResponse)", "ServletStreetAddressTeachings.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpgradTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletAddRemoveTeachingsToStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowStudentsPerClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletReportTeachings.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowClassPerAcademicYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletViewDetailsJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowModuleRoleUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignRole.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListAdresses.doGet(HttpServletRequest,HttpServletResponse)", "ServletViewRegistration.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadListOfTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowClassManagement.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowModuleTeachingUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletModifyPersonalData.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowTeacherModulePerClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletCalculationStatistics.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListUsers.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertNewNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateJustified.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignStudentsInClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletAccess.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "eAdministrator", "params": ["User"]}, "EntityNotFoundException.getMessage()": {"calls": [], "called_by": ["ServletAddTeachingToTeacher.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletCancelSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListTeachings.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletSchoolReportUpdate.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignStudentParent.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTheStudentClassroom.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadClassPerAcademicYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsOfClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTeachingPerTeacher.doGet(HttpServletRequest,HttpServletResponse)", "ServletStreetAddressTeachings.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpgradTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletAddRemoveTeachingsToStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowStudentsPerClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletReportTeachings.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowClassPerAcademicYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletViewDetailsJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowModuleRoleUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignRole.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListAdresses.doGet(HttpServletRequest,HttpServletResponse)", "ServletViewRegistration.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadListOfTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowClassManagement.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowModuleTeachingUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletModifyPersonalData.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowTeacherModulePerClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletCalculationStatistics.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListUsers.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertNewNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateJustified.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignStudentsInClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletAccess.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "EntityNotFoundException", "method_name": "getMessage", "params": []}, "EntityNotFoundException.printStackTrace()": {"calls": [], "called_by": ["ServletAddTeachingToTeacher.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletCancelSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListTeachings.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletSchoolReportUpdate.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignStudentParent.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTheStudentClassroom.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadClassPerAcademicYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsOfClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTeachingPerTeacher.doGet(HttpServletRequest,HttpServletResponse)", "ServletStreetAddressTeachings.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpgradTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletAddRemoveTeachingsToStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowStudentsPerClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletReportTeachings.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowClassPerAcademicYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletViewDetailsJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowModuleRoleUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignRole.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListAdresses.doGet(HttpServletRequest,HttpServletResponse)", "ServletViewRegistration.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadListOfTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowClassManagement.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowModuleTeachingUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletModifyPersonalData.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowTeacherModulePerClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletCalculationStatistics.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListUsers.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertNewNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateJustified.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignStudentsInClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletAccess.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "EntityNotFoundException", "method_name": "printStackTrace", "params": []}, "ConnectionException.getMessage()": {"calls": [], "called_by": ["ServletAddTeachingToTeacher.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletCancelSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListTeachings.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletSchoolReportUpdate.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignStudentParent.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTheStudentClassroom.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadClassPerAcademicYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsOfClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTeachingPerTeacher.doGet(HttpServletRequest,HttpServletResponse)", "ServletStreetAddressTeachings.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpgradTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletAddRemoveTeachingsToStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowStudentsPerClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletReportTeachings.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowClassPerAcademicYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletViewDetailsJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowModuleRoleUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignRole.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListAdresses.doGet(HttpServletRequest,HttpServletResponse)", "ServletViewRegistration.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadListOfTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowClassManagement.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowModuleTeachingUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletModifyPersonalData.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowTeacherModulePerClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletCalculationStatistics.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListUsers.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertNewNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateJustified.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignStudentsInClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsUser.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ConnectionException", "method_name": "getMessage", "params": []}, "ConnectionException.printStackTrace()": {"calls": [], "called_by": ["ServletAddTeachingToTeacher.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletCancelSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListTeachings.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletSchoolReportUpdate.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignStudentParent.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTheStudentClassroom.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadClassPerAcademicYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsOfClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTeachingPerTeacher.doGet(HttpServletRequest,HttpServletResponse)", "ServletStreetAddressTeachings.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpgradTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletAddRemoveTeachingsToStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowStudentsPerClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletReportTeachings.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowClassPerAcademicYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletViewDetailsJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowModuleRoleUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignRole.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListAdresses.doGet(HttpServletRequest,HttpServletResponse)", "ServletViewRegistration.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadListOfTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowClassManagement.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowModuleTeachingUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletModifyPersonalData.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowTeacherModulePerClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletCalculationStatistics.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListUsers.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertNewNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateJustified.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignStudentsInClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletAccess.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ConnectionException", "method_name": "printStackTrace", "params": []}, "ValueInvalidException.printStackTrace()": {"calls": [], "called_by": ["ServletAddTeachingToTeacher.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletCancelSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListTeachings.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletSchoolReportUpdate.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignStudentParent.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTheStudentClassroom.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadClassPerAcademicYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsOfClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTeachingPerTeacher.doGet(HttpServletRequest,HttpServletResponse)", "ServletStreetAddressTeachings.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpgradTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletAddRemoveTeachingsToStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowStudentsPerClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletReportTeachings.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowClassPerAcademicYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletViewDetailsJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowModuleRoleUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignRole.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListAdresses.doGet(HttpServletRequest,HttpServletResponse)", "ServletViewRegistration.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadListOfTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowClassManagement.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowModuleTeachingUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletModifyPersonalData.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowTeacherModulePerClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletCalculationStatistics.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListUsers.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertNewNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateJustified.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignStudentsInClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletAccess.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ValueInvalidException", "method_name": "printStackTrace", "params": []}, "ServletCancelSchoolReport.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletCancelSchoolReport.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletCancelSchoolReport", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowSchoolReport.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.eDirector(User)", "ManagerUser.getInstance()", "ManagerGrade.getGradePerUserIdYearRotation(int,int,int)", "User.getEMail()", "ItemListUsers.setName(String)", "ItemListUsers.setId(int)", "ItemListUsers.setEMail(String)", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "User.getId()", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()", "ManagerGrade.getInstance()", "User.getName()", "ManagerUser.getUserPerId(int)"], "called_by": ["ServletShowSchoolReport.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletShowSchoolReport", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ManagerUser.eDirector(User)": {"calls": [], "called_by": ["ServletViewRegistration.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowStudentsPerClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletCalculationStatistics.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadClassPerAcademicYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowClassPerAcademicYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowModuleRoleUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletAccess.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "eDirector", "params": ["User"]}, "ManagerUser.getUserPerId(int)": {"calls": [], "called_by": ["ServletAddTeachingToTeacher.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignStudentParent.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletCalculationStatistics.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTeachingPerTeacher.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsUser.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "getUserPerId", "params": ["int"]}, "User.getName()": {"calls": [], "called_by": ["ServletShowSchoolReport.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "User", "method_name": "getName", "params": []}, "ItemListUsers.setName(String)": {"calls": [], "called_by": ["ServletShowSchoolReport.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ItemListUsers", "method_name": "setName", "params": ["String"]}, "User.getEMail()": {"calls": [], "called_by": ["ServletShowSchoolReport.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "User", "method_name": "getEMail", "params": []}, "ItemListUsers.setEMail(String)": {"calls": [], "called_by": ["ServletShowSchoolReport.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ItemListUsers", "method_name": "setEMail", "params": ["String"]}, "ValueInvalidException.getMessage()": {"calls": [], "called_by": ["ServletInsertClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListTeachings.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletSchoolReportUpdate.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignStudentParent.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTheStudentClassroom.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadClassPerAcademicYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpgradTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletReportTeachings.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowClassPerAcademicYear.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletViewDetailsJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowModuleRoleUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignRole.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListAdresses.doGet(HttpServletRequest,HttpServletResponse)", "ServletViewRegistration.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadListOfTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowClassManagement.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletModifyPersonalData.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowTeacherModulePerClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletCalculationStatistics.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListUsers.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertNewNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowModuleTeachingUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsUser.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ValueInvalidException", "method_name": "getMessage", "params": []}, "ServletShowSchoolReport.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletShowSchoolReport.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletShowSchoolReport", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletSchoolReportUpdate.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ManagerTeaching.getInstance()", "ManagerGrade.remove(Grade)", "ManagerGrade.getIdGrade(Teaching,int,int,ItemListUsers)", "ManagerTeaching.getTeachingsPerClassId(int)", "Grade.setLaboratory(int)", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "EntityNotFoundException.printStackTrace()", "Grade.setOral(int)", "ManagerGrade.update(Grade)", "Class.getIdStreetAddress()", "ManagerGrade.insert(Grade)", "EntityNotFoundException.getMessage()", "Grade.setTeaching(int)", "ManagerGrade.getInstance()", "Grade.setId_user(int)", "Grade.setAcademicYear(int)", "FieldRequiredException.printStackTrace()", "ItemListUsers.getId()", "ManagerUser.eAdministrator(User)", "Grade.setRotation(int)", "Grade.setWriting(int)", "ConnectionException.printStackTrace()", "Teaching.getId()", "ManagerGrade.getGradePerId(int)"], "called_by": ["ServletSchoolReportUpdate.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletSchoolReportUpdate", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ManagerTeaching.getInstance()": {"calls": [], "called_by": ["ServletAddTeachingToTeacher.doGet(HttpServletRequest,HttpServletResponse)", "ServletAddRemoveTeachingsToStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletSchoolReportUpdate.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadListOfTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletReportTeachings.doGet(HttpServletRequest,HttpServletResponse)", "ServletLoadSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowListTeachings.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTeachingPerTeacher.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowTeacherModulePerClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowDetailsTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletStreetAddressTeachings.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpgradTeaching.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerTeaching", "method_name": "getInstance", "params": []}, "FieldRequiredException.printStackTrace()": {"calls": [], "called_by": ["ServletInsertClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletAddRemoveTeachingsToStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletSchoolReportUpdate.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletReportTeachings.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletShowModuleTeachingUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertSchoolReport.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignStudentsInClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateJustified.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpgradTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveClass.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "FieldRequiredException", "method_name": "printStackTrace", "params": []}, "ServletSchoolReportUpdate.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletSchoolReportUpdate.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletSchoolReportUpdate", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletLoadListOfTeaching.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ManagerTeaching.getInstance()", "ManagerTeaching.getTeachingsPerClassId(int)", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ConnectionException.printStackTrace()", "Class.getIdStreetAddress()", "EntityNotFoundException.getMessage()"], "called_by": ["ServletLoadListOfTeaching.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletLoadListOfTeaching", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletLoadListOfTeaching.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletLoadListOfTeaching.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletLoadListOfTeaching", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletInsertSchoolReport.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ManagerTeaching.getInstance()", "ManagerTeaching.getTeachingsPerClassId(int)", "Grade.setLaboratory(int)", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "EntityNotFoundException.printStackTrace()", "Grade.setOral(int)", "Class.getIdStreetAddress()", "ManagerGrade.insert(Grade)", "EntityNotFoundException.getMessage()", "Grade.setTeaching(int)", "ManagerGrade.getInstance()", "Grade.setId_user(int)", "Grade.setAcademicYear(int)", "FieldRequiredException.printStackTrace()", "ItemListUsers.getId()", "ManagerUser.eAdministrator(User)", "Grade.setRotation(int)", "Grade.setWriting(int)", "ConnectionException.printStackTrace()", "Teaching.getId()"], "called_by": ["ServletInsertSchoolReport.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletInsertSchoolReport", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletInsertSchoolReport.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletInsertSchoolReport.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletInsertSchoolReport", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletLoadSchoolReport.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ManagerTeaching.getInstance()", "ManagerGrade.getGradePerUserIdYearRotation(int,int,int)", "ItemListUsers.getId()", "ManagerTeaching.getTeachingsPerClassId(int)", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ConnectionException.printStackTrace()", "Class.getIdStreetAddress()", "EntityNotFoundException.getMessage()", "ManagerGrade.getInstance()"], "called_by": ["ServletLoadSchoolReport.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletLoadSchoolReport", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletLoadSchoolReport.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletLoadSchoolReport.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletLoadSchoolReport", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowStudentsPerClass.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.eDirector(User)", "ManagerUser.getInstance()", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ManagerClass.getClassPerID(int)", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()", "ManagerClass.getInstance()", "ManagerUser.getStudentPerClassId(int)"], "called_by": ["ServletShowStudentsPerClass.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletShowStudentsPerClass", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowStudentsPerClass.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletShowStudentsPerClass.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletShowStudentsPerClass", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowClassPerAcademicYear.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.eDirector(User)", "ManagerUser.getInstance()", "ManagerClass.getClassPerAcademicYear(int)", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()", "ManagerClass.getInstance()"], "called_by": ["ServletShowClassPerAcademicYear.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletShowClassPerAcademicYear", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowClassPerAcademicYear.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletShowClassPerAcademicYear.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletShowClassPerAcademicYear", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletInitialization.init(ServletConfig)": {"calls": ["ServletConfig.getInitParameter(String)", "Utility.setPoolTimeout(int)", "Utility.setServerSmtp(String)", "Utility.setDriverMySql(String)", "Utility.setCompletePathDatabase(String)", "Utility.setDimensionMaximumPool(int)", "Utility.setTestoAPieDiPagina(String)", "Utility.setActiveTimeout(int)", "Utility.setWaitTimeout(int)", "Utility.setPassword(String)", "Utility.setUserName(String)"], "called_by": [], "class_name": "ServletInitialization", "method_name": "init", "params": ["ServletConfig"]}, "ServletConfig.getInitParameter(String)": {"calls": [], "called_by": ["ServletInitialization.init(ServletConfig)"], "class_name": "ServletConfig", "method_name": "getInitParameter", "params": ["String"]}, "Utility.setServerSmtp(String)": {"calls": [], "called_by": ["ServletInitialization.init(ServletConfig)"], "class_name": "Utility", "method_name": "setServerSmtp", "params": ["String"]}, "Utility.setDriverMySql(String)": {"calls": [], "called_by": ["ServletInitialization.init(ServletConfig)"], "class_name": "Utility", "method_name": "setDriverMySql", "params": ["String"]}, "Utility.setCompletePathDatabase(String)": {"calls": [], "called_by": ["ServletInitialization.init(ServletConfig)"], "class_name": "Utility", "method_name": "setCompletePathDatabase", "params": ["String"]}, "Utility.setUserName(String)": {"calls": [], "called_by": ["ServletInitialization.init(ServletConfig)"], "class_name": "Utility", "method_name": "setUserName", "params": ["String"]}, "Utility.setPassword(String)": {"calls": [], "called_by": ["ServletInitialization.init(ServletConfig)"], "class_name": "Utility", "method_name": "setPassword", "params": ["String"]}, "Utility.setDimensionMaximumPool(int)": {"calls": [], "called_by": ["ServletInitialization.init(ServletConfig)"], "class_name": "Utility", "method_name": "setDimensionMaximumPool", "params": ["int"]}, "Utility.setWaitTimeout(int)": {"calls": [], "called_by": ["ServletInitialization.init(ServletConfig)"], "class_name": "Utility", "method_name": "setWaitTimeout", "params": ["int"]}, "Utility.setActiveTimeout(int)": {"calls": [], "called_by": ["ServletInitialization.init(ServletConfig)"], "class_name": "Utility", "method_name": "setActiveTimeout", "params": ["int"]}, "Utility.setPoolTimeout(int)": {"calls": [], "called_by": ["ServletInitialization.init(ServletConfig)"], "class_name": "Utility", "method_name": "setPoolTimeout", "params": ["int"]}, "Utility.setTestoAPieDiPagina(String)": {"calls": [], "called_by": ["ServletInitialization.init(ServletConfig)"], "class_name": "Utility", "method_name": "setTestoAPieDiPagina", "params": ["String"]}, "ServletShowListClass.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ManagerClass.getClassPerAcademicYear(int)", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()", "ManagerClass.getInstance()"], "called_by": ["ServletShowListClass.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletShowListClass", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowListClass.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletShowListClass.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletShowListClass", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowDetailsOfClass.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ManagerClass.getClassPerID(int)", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()", "ManagerClass.getInstance()"], "called_by": ["ServletShowDetailsOfClass.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletShowDetailsOfClass", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowDetailsOfClass.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletShowDetailsOfClass.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletShowDetailsOfClass", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletInsertClass.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["Class.setName(String)", "ManagerUser.getInstance()", "Class.getAcademicYear()", "ConnectionException.getMessage()", "DuplicateEntityException.printStackTrace()", "ValueInvalidException.printStackTrace()", "ManagerClass.exists(Class)", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ValueInvalidException.getMessage()", "ConnectionException.printStackTrace()", "DuplicateEntityException.getMessage()", "ManagerClass.insert(Class)", "Class.setAcademicYear(int)", "EntityNotFoundException.getMessage()", "Class.setIdStreetAddress(int)", "ManagerClass.getInstance()", "FieldRequiredException.printStackTrace()"], "called_by": ["ServletInsertClass.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletInsertClass", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "DuplicateEntityException.getMessage()": {"calls": [], "called_by": ["ServletInsertClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletModifyPersonalData.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpgradTeaching.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "DuplicateEntityException", "method_name": "getMessage", "params": []}, "DuplicateEntityException.printStackTrace()": {"calls": [], "called_by": ["ServletInsertClass.doGet(HttpServletRequest,HttpServletResponse)", "ServletAddRemoveTeachingsToStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertTeaching.doGet(HttpServletRequest,HttpServletResponse)", "ServletModifyPersonalData.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertStreetAddress.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertJustify.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpgradTeaching.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "DuplicateEntityException", "method_name": "printStackTrace", "params": []}, "ServletInsertClass.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletInsertClass.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletInsertClass", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletRemoveClass.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "Class.getAcademicYear()", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()", "ManagerClass.remove(Class)", "ManagerClass.getInstance()", "FieldRequiredException.printStackTrace()"], "called_by": ["ServletRemoveClass.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletRemoveClass", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletRemoveClass.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletRemoveClass.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletRemoveClass", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowDetailsNote.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "Note.setDescription(String)", "Class.getAcademicYear()", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ManagerRegister.updateNote(Note)", "ValueInvalidException.getMessage()", "EntityNotFoundException.printStackTrace()", "User.getId()", "Note.setIdUser(int)", "EntityNotFoundException.getMessage()", "ManagerRegister.getNotePerId(int)", "Note.setIdNote(int)", "Note.setTeacher(String)", "ManagerUser.eAdministrator(User)", "Utility.String2Date(String)", "ConnectionException.printStackTrace()", "Note.getIdNote()", "ManagerRegister.getInstance()", "FieldRequiredException.getMessage()", "Note.setAcademicYear(int)", "Note.setDataNote(Date)"], "called_by": ["ServletShowDetailsNote.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletShowDetailsNote", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "Utility.String2Date(String)": {"calls": [], "called_by": ["ServletShowDetailsNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletViewRegistration.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertNewNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateJustified.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertJustify.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "Utility", "method_name": "String2Date", "params": ["String"]}, "FieldRequiredException.getMessage()": {"calls": [], "called_by": ["ServletShowDetailsNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletInsertNewNote.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "FieldRequiredException", "method_name": "getMessage", "params": []}, "ServletShowDetailsNote.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletShowDetailsNote.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletShowDetailsNote", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletInsertJustify.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "EntityNotFoundException.printStackTrace()", "EntityNotFoundException.getMessage()", "ManagerRegister.exists(Absence)", "ManagerRegister.insertExcuse(Excuse,Absence)", "DuplicateEntityException.printStackTrace()", "ManagerRegister.getAbsencePerIdAbsence(int)", "DuplicateEntityException.getMessage()", "ManagerUser.eAdministrator(User)", "ManagerRegister.exists(Excuse)", "Utility.String2Date(String)", "Excuse.setAcademicYear(int)", "ConnectionException.printStackTrace()", "ManagerRegister.getInstance()", "Excuse.setDataExcuse(Date)", "Excuse.setIdUser(int)"], "called_by": ["ServletInsertJustify.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletInsertJustify", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletInsertJustify.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletInsertJustify.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletInsertJustify", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowListNote.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ManagerUser.eDirector(User)", "Class.getAcademicYear()", "ManagerRegister.getNotePerIdUserAndAcademicYear(int,int)", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()", "ManagerRegister.getInstance()", "ManagerUser.getUserPerId(int)"], "called_by": ["ServletShowListNote.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletShowListNote", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowListNote.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletShowListNote.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletShowListNote", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletRemoveNote.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ManagerRegister.removeNote(Note)", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ValueInvalidException.getMessage()", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()", "ManagerRegister.getInstance()"], "called_by": ["ServletRemoveNote.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletRemoveNote", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletRemoveNote.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletRemoveNote.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletRemoveNote", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowClassManagement.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ManagerClass.getClassPerAcademicYear(int)", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()", "ManagerClass.getInstance()"], "called_by": ["ServletShowClassManagement.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletShowClassManagement", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowClassManagement.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletShowClassManagement.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletShowClassManagement", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowListJustify.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ManagerUser.eDirector(User)", "Class.getAcademicYear()", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()", "ManagerRegister.getAbsencePerIdUserAndAcademicYear(int,int)", "ManagerUser.getUserPerId(int)", "ManagerRegister.getInstance()"], "called_by": ["ServletShowListJustify.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletShowListJustify", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowListJustify.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletShowListJustify.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletShowListJustify", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletUpdateJustified.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ManagerRegister.updateExcuse(Excuse)", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ManagerRegister.exists(Excuse)", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "Utility.String2Date(String)", "Excuse.setAcademicYear(int)", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()", "ManagerRegister.getInstance()", "Excuse.setDataExcuse(Date)", "FieldRequiredException.printStackTrace()"], "called_by": ["ServletUpdateJustified.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletUpdateJustified", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletUpdateJustified.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletUpdateJustified.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletUpdateJustified", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletViewRegistration.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ManagerUser.eDirector(User)", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "Utility.String2Date(String)", "ManagerClass.getClassPerID(int)", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()", "ManagerRegister.getInstance()", "ManagerRegister.getRegistrationsPerClassIDEData(int,Date)", "ManagerClass.getInstance()"], "called_by": ["ServletViewRegistration.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletViewRegistration", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletViewRegistration.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletViewRegistration.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletViewRegistration", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletViewDetailsJustify.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()", "ManagerRegister.getInstance()", "ManagerRegister.getExcusePerIdExcuse(int)"], "called_by": ["ServletViewDetailsJustify.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletViewDetailsJustify", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletViewDetailsJustify.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletViewDetailsJustify.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletViewDetailsJustify", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "RegisterLine.getStudent()", "Class.getAcademicYear()", "Absence.setDateOfAbsence(Date)", "ManagerRegister.removeDelay(Delay)", "ConnectionException.getMessage()", "RegisterLine.getDelay()", "ManagerRegister.removeAbsence(Absence)", "RegisterLine.getAbsence()", "Absence.setIdExcuse(Integer)", "EntityNotFoundException.printStackTrace()", "ValueInvalidException.getMessage()", "ValueInvalidException.printStackTrace()", "Delay.setTimeDelay(String)", "ManagerRegister.insertAbsence(Absence)", "Absence.setAcademicYear(int)", "ManagerRegister.insertDelay(Delay)", "EntityNotFoundException.getMessage()", "ManagerRegister.getRegistrationsPerClassIDEData(int,Date)", "FieldRequiredException.printStackTrace()", "Absence.setIdUser(int)", "Delay.setIdUser(int)", "ManagerRegister.haveDelay(RegisterLine)", "ItemListUsers.getId()", "ManagerRegister.updateDelay(Delay)", "Delay.setDateDelay(Date)", "ManagerUser.eAdministrator(User)", "Delay.setAcademicYear(int)", "Utility.String2Date(String)", "ManagerRegister.haveAbsence(RegisterLine)", "ConnectionException.printStackTrace()", "ManagerRegister.getInstance()", "FieldRequiredException.getMessage()", "Class.getIdClass()"], "called_by": ["ServletUpdateTheRegister.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletUpdateTheRegister", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletUpdateTheRegister.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletUpdateTheRegister.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletUpdateTheRegister", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletRemoveJustify.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ManagerRegister.removeExcuse(int)", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ManagerRegister.exists(Excuse)", "Excuse.getIdExcuse()", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()", "ManagerRegister.getInstance()", "FieldRequiredException.printStackTrace()"], "called_by": ["ServletRemoveJustify.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletRemoveJustify", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletRemoveJustify.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletRemoveJustify.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletRemoveJustify", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletCalculationStatistics.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.eDirector(User)", "ManagerUser.getInstance()", "ConnectionException.getMessage()", "ManagerClass.getAcademicYearList()", "ManagerUser.getHighlightsStudentNote(Integer)", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ConnectionException.printStackTrace()", "ManagerClass.getInstance()", "EntityNotFoundException.getMessage()", "ManagerUser.getHighlightsStudentAbsence(Integer)", "ManagerUser.getUserPerId(int)"], "called_by": ["ServletCalculationStatistics.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletCalculationStatistics", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ManagerUser.getHighlightsStudentAbsence(Integer)": {"calls": [], "called_by": ["ServletCalculationStatistics.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "getHighlightsStudentAbsence", "params": ["Integer"]}, "ManagerUser.getHighlightsStudentNote(Integer)": {"calls": [], "called_by": ["ServletCalculationStatistics.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "getHighlightsStudentNote", "params": ["Integer"]}, "ServletCalculationStatistics.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletCalculationStatistics.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletCalculationStatistics", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletInsertNewNote.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "Note.setDescription(String)", "Class.getAcademicYear()", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "EntityNotFoundException.printStackTrace()", "User.getId()", "Note.setIdUser(int)", "EntityNotFoundException.getMessage()", "Note.setTeacher(String)", "ManagerUser.eAdministrator(User)", "Utility.String2Date(String)", "ManagerRegister.insertNote(Note)", "ConnectionException.printStackTrace()", "ManagerRegister.getInstance()", "FieldRequiredException.getMessage()", "Note.setAcademicYear(int)", "Note.setDataNote(Date)"], "called_by": ["ServletInsertNewNote.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletInsertNewNote", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletInsertNewNote.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletInsertNewNote.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletInsertNewNote", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowListTeachings.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ManagerTeaching.getInstance()", "ManagerTeaching.getTeachings()", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()"], "called_by": ["ServletShowListTeachings.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletShowListTeachings", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowListTeachings.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletShowListTeachings.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletShowListTeachings", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletInsertTeaching.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ManagerTeaching.getInstance()", "ConnectionException.getMessage()", "DuplicateEntityException.printStackTrace()", "ValueInvalidException.printStackTrace()", "ManagerTeaching.insert(Teaching)", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ValueInvalidException.getMessage()", "ConnectionException.printStackTrace()", "DuplicateEntityException.getMessage()", "FieldRequiredException.printStackTrace()", "EntityNotFoundException.getMessage()", "Teaching.setName(String)", "ManagerTeaching.exists(Teaching)"], "called_by": ["ServletInsertTeaching.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletInsertTeaching", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletInsertTeaching.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletInsertTeaching.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletInsertTeaching", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletRemoveTeaching.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ManagerTeaching.getInstance()", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ManagerTeaching.remove(Teaching)", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()", "FieldRequiredException.printStackTrace()"], "called_by": ["ServletRemoveTeaching.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletRemoveTeaching", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletRemoveTeaching.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletRemoveTeaching.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletRemoveTeaching", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletUpgradTeaching.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ManagerTeaching.getInstance()", "ConnectionException.getMessage()", "DuplicateEntityException.printStackTrace()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "DuplicateEntityException.getMessage()", "ManagerTeaching.update(Teaching)", "ConnectionException.printStackTrace()", "FieldRequiredException.printStackTrace()", "Teaching.setId(int)", "EntityNotFoundException.getMessage()", "Teaching.setName(String)", "Teaching.getId()", "ManagerTeaching.exists(Teaching)", "ManagerTeaching.getTeachingId(Teaching)"], "called_by": ["ServletUpgradTeaching.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletUpgradTeaching", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletUpgradTeaching.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletUpgradTeaching.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletUpgradTeaching", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowDetailsTeaching.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ManagerTeaching.getInstance()", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ManagerUser.eAdministrator(User)", "ManagerTeaching.getTeachingPerId(int)", "EntityNotFoundException.printStackTrace()", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()"], "called_by": ["ServletShowDetailsTeaching.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletShowDetailsTeaching", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowDetailsTeaching.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletShowDetailsTeaching.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletShowDetailsTeaching", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowListAdresses.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ManagerStreetAddress.getInstance()", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()", "ManagerStreetAddress.getStreetAddressElenco()"], "called_by": ["ServletShowListAdresses.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletShowListAdresses", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowListAdresses.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletShowListAdresses.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletShowListAdresses", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletRemoveStreetAddress.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ManagerStreetAddress.getInstance()", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()", "ManagerStreetAddress.delete(StreetAddress)", "FieldRequiredException.printStackTrace()"], "called_by": ["ServletRemoveStreetAddress.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletRemoveStreetAddress", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletRemoveStreetAddress.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletRemoveStreetAddress.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletRemoveStreetAddress", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletAddRemoveTeachingsToStreetAddress.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerStreetAddress.removeTeachingAsStreetAddress(StreetAddress,Teaching)", "ManagerUser.getInstance()", "ManagerTeaching.getInstance()", "ManagerStreetAddress.getInstance()", "ConnectionException.getMessage()", "DuplicateEntityException.printStackTrace()", "ValueInvalidException.printStackTrace()", "ManagerUser.eAdministrator(User)", "ManagerTeaching.getTeachingPerId(int)", "EntityNotFoundException.printStackTrace()", "ManagerStreetAddress.assignTeachingAsStreetAddress(StreetAddress,Teaching)", "ConnectionException.printStackTrace()", "ManagerStreetAddress.hasTeaching(Teaching,StreetAddress)", "EntityNotFoundException.getMessage()", "FieldRequiredException.printStackTrace()"], "called_by": ["ServletAddRemoveTeachingsToStreetAddress.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletAddRemoveTeachingsToStreetAddress", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletAddRemoveTeachingsToStreetAddress.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletAddRemoveTeachingsToStreetAddress.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletAddRemoveTeachingsToStreetAddress", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletStreetAddressTeachings.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ManagerTeaching.getInstance()", "ManagerTeaching.getTeachings()", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()"], "called_by": ["ServletStreetAddressTeachings.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletStreetAddressTeachings", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletStreetAddressTeachings.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletStreetAddressTeachings.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletStreetAddressTeachings", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletInsertStreetAddress.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerStreetAddress.insert(StreetAddress)", "ManagerUser.getInstance()", "ManagerStreetAddress.getInstance()", "ManagerStreetAddress.exists(StreetAddress)", "StreetAddress.setName(String)", "ConnectionException.getMessage()", "DuplicateEntityException.printStackTrace()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "DuplicateEntityException.getMessage()", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()", "FieldRequiredException.printStackTrace()"], "called_by": ["ServletInsertStreetAddress.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletInsertStreetAddress", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletInsertStreetAddress.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletInsertStreetAddress.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletInsertStreetAddress", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowDetailsStreetAddress.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ManagerStreetAddress.getInstance()", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ConnectionException.printStackTrace()", "ManagerStreetAddress.getStreetAddressPerId(int)", "EntityNotFoundException.getMessage()"], "called_by": ["ServletShowDetailsStreetAddress.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletShowDetailsStreetAddress", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowDetailsStreetAddress.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletShowDetailsStreetAddress.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletShowDetailsStreetAddress", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletModifyPersonalData.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ManagerUser.getUserId(User)", "ConnectionException.getMessage()", "DuplicateEntityException.printStackTrace()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "User.getId()", "ConnectionException.printStackTrace()", "DuplicateEntityException.getMessage()", "ManagerUser.exists(User)", "EntityNotFoundException.getMessage()", "ManagerUser.existsLogin(User)", "User.setPassword(String)", "ManagerUser.update(User)"], "called_by": ["ServletModifyPersonalData.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletModifyPersonalData", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ManagerUser.existsLogin(User)": {"calls": [], "called_by": ["ServletInsertUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletModifyPersonalData.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateUser.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "existsLogin", "params": ["User"]}, "User.setPassword(String)": {"calls": [], "called_by": ["ServletInsertUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletModifyPersonalData.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateUser.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "User", "method_name": "setPassword", "params": ["String"]}, "ManagerUser.update(User)": {"calls": [], "called_by": ["ServletModifyPersonalData.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateUser.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "update", "params": ["User"]}, "ServletModifyPersonalData.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletModifyPersonalData.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletModifyPersonalData", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletLoadClassPerAcademicYear.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.eDirector(User)", "ManagerUser.getInstance()", "ManagerClass.getClassPerAcademicYear(int)", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()", "ManagerClass.getInstance()"], "called_by": ["ServletLoadClassPerAcademicYear.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletLoadClassPerAcademicYear", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletLoadClassPerAcademicYear.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletLoadClassPerAcademicYear.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletLoadClassPerAcademicYear", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowListUsers.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getUserElenco()", "ManagerUser.getInstance()", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()"], "called_by": ["ServletShowListUsers.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletShowListUsers", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ManagerUser.getUserElenco()": {"calls": [], "called_by": ["ServletShowListUsers.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "getUserElenco", "params": []}, "ServletShowListUsers.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletShowListUsers.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletShowListUsers", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletRemoveUser.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.remove(User)", "ManagerUser.getAdministrators()", "ManagerUser.getInstance()", "DeleteAdministratorException.getMessage()", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()", "DeleteAdministratorException.printStackTrace()"], "called_by": ["ServletRemoveUser.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletRemoveUser", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ManagerUser.remove(User)": {"calls": [], "called_by": ["ServletRemoveUser.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "remove", "params": ["User"]}, "ManagerUser.getAdministrators()": {"calls": [], "called_by": ["ServletRemoveUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignRole.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "getAdministrators", "params": []}, "DeleteAdministratorException.getMessage()": {"calls": [], "called_by": ["ServletRemoveUser.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "DeleteAdministratorException", "method_name": "getMessage", "params": []}, "DeleteAdministratorException.printStackTrace()": {"calls": [], "called_by": ["ServletRemoveUser.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "DeleteAdministratorException", "method_name": "printStackTrace", "params": []}, "ServletRemoveUser.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletRemoveUser.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletRemoveUser", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowDetailsUser.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()", "ManagerUser.getUserPerId(int)"], "called_by": ["ServletShowDetailsUser.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletShowDetailsUser", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowDetailsUser.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletShowDetailsUser.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletShowDetailsUser", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletAddTeachingToTeacher.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ManagerTeaching.getInstance()", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ManagerUser.assegnareTeacherInClassTeaching(User,int,int)", "ManagerUser.eAdministrator(User)", "ManagerTeaching.getTeachingPerId(int)", "User.getId()", "ManagerClass.getClassPerID(int)", "ManagerUser.hasTeaching(User,Teaching,Class)", "EntityNotFoundException.printStackTrace()", "ManagerClass.getInstance()", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()", "ManagerUser.getUserPerId(int)"], "called_by": ["ServletAddTeachingToTeacher.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletAddTeachingToTeacher", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ManagerUser.hasTeaching(User,Teaching,Class)": {"calls": [], "called_by": ["ServletAddTeachingToTeacher.doGet(HttpServletRequest,HttpServletResponse)", "ServletRemoveTeachingPerTeacher.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "hasTeaching", "params": ["User", "Teaching", "Class"]}, "ManagerUser.assegnareTeacherInClassTeaching(User,int,int)": {"calls": [], "called_by": ["ServletAddTeachingToTeacher.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "assegnareTeacherInClassTeaching", "params": ["User", "int", "int"]}, "ServletAddTeachingToTeacher.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletAddTeachingToTeacher.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletAddTeachingToTeacher", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletAssignStudentsInClass.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ManagerUser.assignStudentClass(User,int)", "ConnectionException.getMessage()", "ManagerClass.getClassPerUserAcademicYear(User,int)", "ValueInvalidException.printStackTrace()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ConnectionException.printStackTrace()", "FieldRequiredException.printStackTrace()", "EntityNotFoundException.getMessage()", "ManagerClass.getInstance()", "Class.getIdClass()", "ManagerUser.removeStudentClass(User,int)"], "called_by": ["ServletAssignStudentsInClass.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletAssignStudentsInClass", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ManagerUser.removeStudentClass(User,int)": {"calls": [], "called_by": ["ServletRemoveTheStudentClassroom.doGet(HttpServletRequest,HttpServletResponse)", "ServletAssignStudentsInClass.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "removeStudentClass", "params": ["User", "int"]}, "ManagerUser.assignStudentClass(User,int)": {"calls": [], "called_by": ["ServletAssignStudentsInClass.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "assignStudentClass", "params": ["User", "int"]}, "ServletAssignStudentsInClass.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletAssignStudentsInClass.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletAssignStudentsInClass", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowModuleRoleUser.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.eParent(User)", "ManagerUser.getInstance()", "ManagerUser.eDirector(User)", "ManagerUser.eStudent(User)", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "Utility.BooleanToInt(boolean)", "ConnectionException.printStackTrace()", "ManagerUser.eAtaPersone(User)", "EntityNotFoundException.getMessage()", "ManagerUser.eTeacher(User)"], "called_by": ["ServletShowModuleRoleUser.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletShowModuleRoleUser", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ManagerUser.eAtaPersone(User)": {"calls": [], "called_by": ["ServletShowModuleRoleUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletAccess.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "eAtaPersone", "params": ["User"]}, "ManagerUser.eParent(User)": {"calls": [], "called_by": ["ServletShowModuleRoleUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletAccess.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "eParent", "params": ["User"]}, "Utility.BooleanToInt(boolean)": {"calls": [], "called_by": ["ServletShowModuleRoleUser.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "Utility", "method_name": "BooleanToInt", "params": ["boolean"]}, "ServletShowModuleRoleUser.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletShowModuleRoleUser.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletShowModuleRoleUser", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletLogOut.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletLogOut.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletLogOut", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletLogOut.doGet(HttpServletRequest,HttpServletResponse)": {"calls": [], "called_by": ["ServletLogOut.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletLogOut", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowTeacherModulePerClass.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ManagerTeaching.getInstance()", "ManagerTeaching.getTeachingsPerClassId(int)", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ManagerClass.getClassPerID(int)", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()", "ManagerClass.getInstance()"], "called_by": ["ServletShowTeacherModulePerClass.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletShowTeacherModulePerClass", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowTeacherModulePerClass.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletShowTeacherModulePerClass.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletShowTeacherModulePerClass", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletUpdateUser.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "User.setCell(String)", "ManagerUser.getUserId(User)", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "User.setEMail(String)", "ValueInvalidException.getMessage()", "EntityNotFoundException.printStackTrace()", "User.getId()", "EntityNotFoundException.getMessage()", "User.setLogin(String)", "ManagerUser.update(User)", "DuplicateEntityException.printStackTrace()", "User.setSurname(String)", "ManagerUser.eAdministrator(User)", "DuplicateEntityException.getMessage()", "ConnectionException.printStackTrace()", "ManagerUser.exists(User)", "User.setFirstName(String)", "ManagerUser.existsLogin(User)", "User.setPassword(String)"], "called_by": ["ServletUpdateUser.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletUpdateUser", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "User.setFirstName(String)": {"calls": [], "called_by": ["ServletInsertUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateUser.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "User", "method_name": "setFirstName", "params": ["String"]}, "User.setSurname(String)": {"calls": [], "called_by": ["ServletInsertUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateUser.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "User", "method_name": "setSurname", "params": ["String"]}, "User.setCell(String)": {"calls": [], "called_by": ["ServletInsertUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateUser.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "User", "method_name": "setCell", "params": ["String"]}, "User.setLogin(String)": {"calls": [], "called_by": ["ServletInsertUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateUser.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "User", "method_name": "setLogin", "params": ["String"]}, "User.setEMail(String)": {"calls": [], "called_by": ["ServletInsertUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletUpdateUser.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "User", "method_name": "setEMail", "params": ["String"]}, "ServletUpdateUser.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletUpdateUser.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletUpdateUser", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletAssignRole.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getAdministrators()", "ManagerUser.getInstance()", "DeleteManagerException.printStackTrace()", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ManagerUser.assignRole(User,int)", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()", "ManagerUser.removeRole(User,int)", "DeleteManagerException.getMessage()"], "called_by": ["ServletAssignRole.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletAssignRole", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ManagerUser.assignRole(User,int)": {"calls": [], "called_by": ["ServletAssignRole.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "assignRole", "params": ["User", "int"]}, "ManagerUser.removeRole(User,int)": {"calls": [], "called_by": ["ServletAssignRole.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "removeRole", "params": ["User", "int"]}, "DeleteManagerException.getMessage()": {"calls": [], "called_by": ["ServletAssignRole.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "DeleteManagerException", "method_name": "getMessage", "params": []}, "DeleteManagerException.printStackTrace()": {"calls": [], "called_by": ["ServletAssignRole.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "DeleteManagerException", "method_name": "printStackTrace", "params": []}, "ServletAssignRole.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletAssignRole.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletAssignRole", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletRemoveTeachingPerTeacher.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ManagerTeaching.getInstance()", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ManagerUser.eAdministrator(User)", "ManagerTeaching.getTeachingPerId(int)", "User.getId()", "ManagerClass.getClassPerID(int)", "ManagerUser.hasTeaching(User,Teaching,Class)", "EntityNotFoundException.printStackTrace()", "ManagerClass.getInstance()", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()", "ManagerUser.removeTeacherInClassTeaching(User,int,int)", "ManagerUser.getUserPerId(int)"], "called_by": ["ServletRemoveTeachingPerTeacher.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletRemoveTeachingPerTeacher", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ManagerUser.removeTeacherInClassTeaching(User,int,int)": {"calls": [], "called_by": ["ServletRemoveTeachingPerTeacher.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "removeTeacherInClassTeaching", "params": ["User", "int", "int"]}, "ServletRemoveTeachingPerTeacher.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletRemoveTeachingPerTeacher.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletRemoveTeachingPerTeacher", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletInsertUser.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "User.setCell(String)", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "User.setEMail(String)", "ValueInvalidException.getMessage()", "EntityNotFoundException.printStackTrace()", "EntityNotFoundException.getMessage()", "User.setLogin(String)", "ManagerUser.insert(User)", "LoginException.printStackTrace()", "DuplicateEntityException.printStackTrace()", "User.setSurname(String)", "ManagerUser.eAdministrator(User)", "DuplicateEntityException.getMessage()", "ConnectionException.printStackTrace()", "LoginException.getMessage()", "ManagerUser.exists(User)", "User.setFirstName(String)", "ManagerUser.existsLogin(User)", "User.setPassword(String)"], "called_by": ["ServletInsertUser.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletInsertUser", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ManagerUser.insert(User)": {"calls": [], "called_by": ["ServletInsertUser.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "insert", "params": ["User"]}, "LoginException.getMessage()": {"calls": [], "called_by": ["ServletInsertUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletAccess.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "LoginException", "method_name": "getMessage", "params": []}, "LoginException.printStackTrace()": {"calls": [], "called_by": ["ServletInsertUser.doGet(HttpServletRequest,HttpServletResponse)", "ServletAccess.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "LoginException", "method_name": "printStackTrace", "params": []}, "ServletInsertUser.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletInsertUser.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletInsertUser", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowModuleTeachingUser.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ConnectionException.printStackTrace()", "ManagerClass.getClassPerTeacher(User)", "EntityNotFoundException.getMessage()", "ManagerClass.getInstance()", "ManagerUser.eTeacher(User)", "FieldRequiredException.printStackTrace()"], "called_by": ["ServletShowModuleTeachingUser.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletShowModuleTeachingUser", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletShowModuleTeachingUser.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletShowModuleTeachingUser.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletShowModuleTeachingUser", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletAccess.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.eParent(User)", "ManagerUser.getInstance()", "ManagerUser.eStudent(User)", "ManagerUser.eDirector(User)", "LoginException.printStackTrace()", "ValueInvalidException.printStackTrace()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "LoginException.getMessage()", "ConnectionException.printStackTrace()", "ManagerUser.login(String,String)", "ManagerUser.eAtaPersone(User)", "EntityNotFoundException.getMessage()", "ManagerUser.eTeacher(User)", "ManagerUser.getUserPerLogin(String)"], "called_by": ["ServletAccess.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletAccess", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ManagerUser.getUserPerLogin(String)": {"calls": [], "called_by": ["ServletAccess.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "getUserPerLogin", "params": ["String"]}, "ManagerUser.login(String,String)": {"calls": [], "called_by": ["ServletAccess.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "login", "params": ["String", "String"]}, "ServletAccess.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletAccess.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletAccess", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletAssignStudentParent.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ItemListUsers.getId()", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.removeParent(User)", "ManagerUser.eAdministrator(User)", "User.getId()", "EntityNotFoundException.printStackTrace()", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()", "ManagerUser.assignParent(User,int)", "ManagerUser.getUserPerId(int)", "ManagerUser.getStudents()"], "called_by": ["ServletAssignStudentParent.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletAssignStudentParent", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ManagerUser.getStudents()": {"calls": [], "called_by": ["ServletAssignStudentParent.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "getStudents", "params": []}, "ManagerUser.assignParent(User,int)": {"calls": [], "called_by": ["ServletAssignStudentParent.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "assignParent", "params": ["User", "int"]}, "ManagerUser.removeParent(User)": {"calls": [], "called_by": ["ServletAssignStudentParent.doGet(HttpServletRequest,HttpServletResponse)"], "class_name": "ManagerUser", "method_name": "removeParent", "params": ["User"]}, "ServletAssignStudentParent.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletAssignStudentParent.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletAssignStudentParent", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletRemoveTheStudentClassroom.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ManagerUser.getStudentPerClassId(int)", "ItemListUsers.getId()", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "User.getId()", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()", "ManagerClass.getInstance()", "Class.getIdClass()", "ManagerUser.removeStudentClass(User,int)"], "called_by": ["ServletRemoveTheStudentClassroom.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletRemoveTheStudentClassroom", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletRemoveTheStudentClassroom.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletRemoveTheStudentClassroom.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletRemoveTheStudentClassroom", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletReportTeachings.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.getInstance()", "ManagerTeaching.getInstance()", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ManagerClass.getClassPerTeacherAcademicYear(User,int)", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ValueInvalidException.getMessage()", "ConnectionException.printStackTrace()", "EntityNotFoundException.getMessage()", "ManagerClass.getInstance()", "FieldRequiredException.printStackTrace()"], "called_by": ["ServletReportTeachings.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletReportTeachings", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletReportTeachings.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletReportTeachings.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletReportTeachings", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletLoadYear.doGet(HttpServletRequest,HttpServletResponse)": {"calls": ["ManagerUser.eDirector(User)", "ManagerUser.getInstance()", "ConnectionException.getMessage()", "ValueInvalidException.printStackTrace()", "ValueInvalidException.getMessage()", "ManagerUser.eAdministrator(User)", "EntityNotFoundException.printStackTrace()", "ConnectionException.printStackTrace()", "ManagerClass.getInstance()", "EntityNotFoundException.getMessage()", "ManagerClass.getAcademicYearList()"], "called_by": ["ServletLoadYear.doPost(HttpServletRequest,HttpServletResponse)"], "class_name": "ServletLoadYear", "method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"]}, "ServletLoadYear.doPost(HttpServletRequest,HttpServletResponse)": {"calls": ["ServletLoadYear.doGet(HttpServletRequest,HttpServletResponse)"], "called_by": [], "class_name": "ServletLoadYear", "method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"]}}